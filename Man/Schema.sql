-- Script was generated by Devart dbForge Studio for MySQL, Version 6.0.315.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 23/07/2013 10:36:45
-- Server version: 5.5.25-log
-- Client version: 4.1

--
-- Definition for database xpinatordb
--
CREATE DATABASE xpinatordb
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for database xpinatordb_history
--
CREATE DATABASE xpinatordb_history
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for database xplogdb
--
CREATE DATABASE xplogdb
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

-- 
-- Set default database
--
USE xpinatordb;

--
-- Definition for table activebonusgamerandomizedoptions
--
CREATE TABLE activebonusgamerandomizedoptions (
  Id bigint(20) NOT NULL,
  ActiveBonusGameId bigint(20) NOT NULL,
  LevelOptionId smallint(5) UNSIGNED NOT NULL,
  OptionTypeId tinyint(3) UNSIGNED NOT NULL,
  Ordinal int(11) DEFAULT NULL,
  OptionValue decimal(10, 0) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_ActiveBonusGameLevelRandomizedOptions_ActiveBonusGames1 (ActiveBonusGameId),
  INDEX fk_ActiveBonusGameLevelRandomizedOptions_BonusGameLevelOptions1 (LevelOptionId),
  INDEX fk_ActiveBonusGameLevelRandomizedOptions_BonusGameOptionTypes1 (OptionTypeId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 63
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table activebonusgames
--
CREATE TABLE activebonusgames (
  Id bigint(20) NOT NULL,
  BUID bigint(20) DEFAULT NULL,
  BrandGameId int(10) UNSIGNED DEFAULT NULL,
  ParentSpinId bigint(20) DEFAULT NULL,
  ParentSpinLineBet decimal(14, 2) DEFAULT NULL,
  BonusGameConfigId smallint(5) UNSIGNED NOT NULL,
  BonusGameLevelSetId int(10) UNSIGNED NOT NULL,
  Status int(11) NOT NULL,
  InitTS datetime DEFAULT NULL,
  StartedTS datetime DEFAULT NULL,
  CompletedTS datetime DEFAULT NULL,
  BonusRoundMultiplier decimal(10, 0) DEFAULT NULL,
  CurrentLevel int(11) DEFAULT NULL,
  AmountWon decimal(14, 2) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_ActiveBonusGames_BonusGameConfig1 (BonusGameConfigId),
  INDEX fk_ActiveBonusGames_BonusGameLevelSet1 (BonusGameLevelSetId),
  INDEX fk_ActiveBonusGames_slotgamehistory1 (ParentSpinId),
  INDEX fk_BrandGame_idx (BrandGameId),
  INDEX fk_BrandUser_idx (BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 123
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table activebonusgameuserselections
--
CREATE TABLE activebonusgameuserselections (
  Id bigint(20) NOT NULL,
  ActiveBonusGameId bigint(20) NOT NULL,
  BonusGameLevelId smallint(5) UNSIGNED NOT NULL,
  SelectedOptionId bigint(20) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_ActiveBonusGameLevels_ActiveBonusGameLevelRandomizedOptions1 (SelectedOptionId),
  INDEX fk_ActiveBonusGameLevels_ActiveBonusGames1 (ActiveBonusGameId),
  INDEX fk_ActiveBonusGames_BonusGameLevels1 (BonusGameLevelId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 64
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table activegifts
--
CREATE TABLE activegifts (
  Id bigint(20) NOT NULL,
  SenderId bigint(20) NOT NULL,
  ReceiverId bigint(20) DEFAULT NULL,
  BrandGiftId smallint(5) UNSIGNED NOT NULL,
  ReceiverSocialNetworkId varchar(100) DEFAULT NULL,
  SocialNetworkGiftRequestId varchar(100) DEFAULT NULL,
  GiftValues varchar(200) DEFAULT NULL,
  SentTS datetime DEFAULT NULL,
  GiftOriginType int(11) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX activegifts_date_idx (SentTS),
  INDEX activegifts_rec_net_idx (ReceiverSocialNetworkId),
  INDEX fk_activegifts_brandbifts1 (BrandGiftId),
  INDEX FK_Receiver (ReceiverId),
  INDEX FK_Sender (SenderId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 106
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table activenotifications
--
CREATE TABLE activenotifications (
  Id int(11) UNSIGNED NOT NULL,
  NotificationTemplateId int(11) UNSIGNED NOT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  Ordinal tinyint(4) UNSIGNED NOT NULL,
  CampaignId varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  RefParams varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  SocialNotificationProcessStartedTS datetime DEFAULT NULL,
  SocialNotificationProcessCompletedTS datetime DEFAULT NULL,
  SocialNotificationLastSentTS datetime DEFAULT NULL,
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (Id),
  INDEX activenotifications_template_idx (NotificationTemplateId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table activenotificationtargets
--
CREATE TABLE activenotificationtargets (
  Id bigint(20) UNSIGNED NOT NULL,
  ActiveNotificationId int(11) UNSIGNED NOT NULL,
  TargetType tinyint(4) UNSIGNED NOT NULL COMMENT 'possible values: All, Tag, SocialNetworkId, BUID',
  TargetValue varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  ParametersValue varchar(1000) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL COMMENT 'json formatted key/value array',
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (Id),
  INDEX activenotificationtargets_active_idx (ActiveNotificationId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 70
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table autonotificationconfig
--
CREATE TABLE autonotificationconfig (
  Id smallint(6) UNSIGNED NOT NULL,
  Description varchar(255) NOT NULL,
  AutoNotificationType tinyint(4) UNSIGNED NOT NULL,
  NotificationTemplateId int(11) UNSIGNED NOT NULL,
  CampaignId varchar(255) NOT NULL,
  RefParams varchar(255) DEFAULT NULL,
  Ordinal tinyint(4) UNSIGNED NOT NULL,
  ParameterValues varchar(255) DEFAULT NULL,
  JsonMetaData varchar(255) NOT NULL,
  ExpiresInHours smallint(6) UNSIGNED NOT NULL,
  IsEnabled bit(1) NOT NULL DEFAULT b'1',
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgameconfig
--
CREATE TABLE bonusgameconfig (
  Id smallint(5) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  NumberOfLevels int(11) NOT NULL DEFAULT 1,
  Version int(11) DEFAULT NULL,
  BonusGameTypeId int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgameleveloptions
--
CREATE TABLE bonusgameleveloptions (
  Id smallint(5) UNSIGNED NOT NULL,
  BonusGameLevelsId smallint(5) UNSIGNED NOT NULL,
  BonusGameLevelSetId int(10) UNSIGNED NOT NULL,
  BonusGameOptionTypeId bigint(20) NOT NULL,
  Value decimal(10, 0) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_BonusGameLevelOptions_BonusGameLevels1 (BonusGameLevelsId),
  INDEX fk_BonusGameLevelOptions_BonusGameLevelSet1 (BonusGameLevelSetId),
  INDEX fk_BonusGameLevelOptions_BonusGameOptionTypes1 (BonusGameOptionTypeId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 61
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgamelevelsconfig
--
CREATE TABLE bonusgamelevelsconfig (
  Id smallint(5) UNSIGNED NOT NULL,
  BonusGameId smallint(5) UNSIGNED NOT NULL,
  AggregationOperandId bigint(20) NOT NULL,
  Ordinal int(11) NOT NULL,
  NumberOfLevelOptions int(11) NOT NULL,
  NumberOfAllowedSelections int(11) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_BonusGameLevels_BonusGame1 (BonusGameId),
  INDEX fk_BonusGameLevels_BonusGameLevelWinOperandTypes1 (AggregationOperandId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 606
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgamelevelset
--
CREATE TABLE bonusgamelevelset (
  Id int(10) UNSIGNED NOT NULL,
  BonusGameId smallint(5) UNSIGNED NOT NULL,
  BrandGameId int(10) UNSIGNED NOT NULL,
  Name varchar(45) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_BonusGameLevelSet_BonusGame1 (BonusGameId),
  INDEX fk_BonusGameLevelSet_BrandGames1 (BrandGameId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 108
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgamelevelwinoperandtypes
--
CREATE TABLE bonusgamelevelwinoperandtypes (
  Id smallint(5) UNSIGNED NOT NULL,
  Name varchar(45) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table bonusgameoptiontypes
--
CREATE TABLE bonusgameoptiontypes (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brandgames
--
CREATE TABLE brandgames (
  Id int(10) UNSIGNED NOT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  GameId smallint(5) UNSIGNED NOT NULL,
  BonusGameId smallint(5) UNSIGNED NOT NULL,
  Ordinal int(11) DEFAULT NULL,
  RequiredLevel int(11) DEFAULT NULL,
  PriceToOpen decimal(14, 2) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_2_Brands1 (BrandId),
  INDEX fk_BrandGames_BonusGame1 (BonusGameId),
  INDEX fk_BrandGames_Games1 (GameId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 546
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brandgifts
--
CREATE TABLE brandgifts (
  Id smallint(5) UNSIGNED NOT NULL,
  GiftId smallint(5) UNSIGNED NOT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  MinimumFrequencyMinutes int(11) DEFAULT NULL,
  ExpirationHours int(11) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_brandbifts_gifts1 (GiftId),
  INDEX fk_Brands (BrandId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brandgiftvalues
--
CREATE TABLE brandgiftvalues (
  Id int(10) UNSIGNED NOT NULL,
  BrandGiftId smallint(5) UNSIGNED NOT NULL,
  FromLevel int(11) DEFAULT NULL,
  ToLevel int(11) DEFAULT NULL,
  `Values` varchar(200) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_brandgiftvalues_brandbifts1 (BrandGiftId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 819
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brands
--
CREATE TABLE brands (
  Id smallint(5) UNSIGNED NOT NULL,
  BrandNetworkId tinyint(4) DEFAULT NULL,
  DefaultLevelConfigSet bigint(20) DEFAULT NULL,
  DefaultUserConfig bigint(20) DEFAULT NULL,
  Name varchar(45) NOT NULL,
  SocialNetworkConfig varchar(1000) DEFAULT NULL,
  BrandConfiguration varchar(2000) DEFAULT NULL,
  LikeBonusAmount decimal(10, 0) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  UNIQUE INDEX Name_UNIQUE (Name)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brandsslotconfig
--
CREATE TABLE brandsslotconfig (
  Id smallint(6) NOT NULL,
  AllowedLineBets varchar(255) NOT NULL,
  Version int(11) NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table branduserconfig
--
CREATE TABLE branduserconfig (
  Id smallint(5) UNSIGNED NOT NULL,
  TimerBonusCooldownMinutes decimal(10, 1) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table BrandUserDailyActivity
--
CREATE TABLE BrandUserDailyActivity (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  Logins int(10) UNSIGNED NOT NULL,
  Spins int(10) UNSIGNED NOT NULL,
  TotalBets decimal(14, 2) NOT NULL,
  TotalFreeBets decimal(14, 2) DEFAULT NULL,
  TotalWinAmount decimal(14, 2) NOT NULL,
  LastBalance decimal(14, 2) DEFAULT NULL,
  LastLevel int(10) UNSIGNED DEFAULT NULL,
  MaxSpinsPossible int(10) UNSIGNED NOT NULL,
  Deposits int(10) UNSIGNED NOT NULL,
  DepositsSum decimal(14, 2) NOT NULL,
  IncompleteDeposits int(10) UNSIGNED NOT NULL,
  FirstDepositDate tinyint(1) NOT NULL,
  GiftsSent int(10) UNSIGNED NOT NULL,
  GiftsReceived int(10) UNSIGNED NOT NULL,
  BonusesCollected int(10) UNSIGNED NOT NULL,
  SumBonusesCollected decimal(14, 2) NOT NULL,
  BonusesGranted int(10) UNSIGNED NOT NULL,
  SumBonusesGranted decimal(14, 2) NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 126
CHARACTER SET utf8
COLLATE utf8_general_ci
PARTITION BY RANGE (TO_DAYS(ActivityDate))
(
PARTITION p20121229 VALUES LESS THAN (735236),
PARTITION p20121230 VALUES LESS THAN (735237),
PARTITION PMAX VALUES LESS THAN (MAXVALUE)
);

--
-- Definition for table branduserfacebookachievements
--
CREATE TABLE branduserfacebookachievements (
  Id bigint(20) UNSIGNED NOT NULL,
  BUID bigint(20) UNSIGNED NOT NULL,
  FacebookAchievementTypeId int(11) UNSIGNED NOT NULL,
  CreatedTS datetime DEFAULT NULL,
  MetaData varchar(255) DEFAULT NULL,
  ResponseCode varchar(1000) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 268
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table brandusers
--
CREATE TABLE brandusers (
  id bigint(20) NOT NULL,
  UserId bigint(20) NOT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  LevelConfigSetId bigint(20) NOT NULL,
  BrandUserConfigId bigint(20) NOT NULL,
  CalculatedCurrentLevel int(11) DEFAULT NULL,
  IsSubscribed bit(1) DEFAULT NULL,
  IsPublished bit(1) DEFAULT NULL,
  IsViralBonusUsed bit(1) DEFAULT NULL,
  IsAppRemoved tinyint(1) DEFAULT NULL,
  Email varchar(255) DEFAULT NULL,
  ReferrerUrl varchar(500) DEFAULT NULL,
  SocialNetworkReferrer varchar(500) DEFAULT NULL,
  IsDepositor bit(1) DEFAULT NULL,
  FirstDepositDate datetime DEFAULT NULL,
  IsLike bit(1) DEFAULT NULL,
  LikeTS datetime DEFAULT NULL,
  RegistrationTS datetime DEFAULT NULL,
  RegistrationLocale varchar(255) DEFAULT NULL,
  LastLoginTS datetime DEFAULT NULL,
  QueryString varchar(255) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  Gender tinyint(1) DEFAULT NULL,
  PRIMARY KEY (id),
  INDEX EMAIL_IDX (Email),
  INDEX fk_BrandUsers_Brands1 (BrandId),
  INDEX fk_BrandUsers_BrandUserConfig1 (BrandUserConfigId),
  INDEX fk_BrandUsers_LevelConfigSets1 (LevelConfigSetId),
  INDEX fk_BrandUsers_Users1 (UserId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 92
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table branduserstate
--
CREATE TABLE branduserstate (
  Id bigint(20) NOT NULL,
  CurrentBalance decimal(14, 2) NOT NULL,
  CurrentXP decimal(14, 2) NOT NULL,
  CalculatedCurrentLevel int(11) DEFAULT NULL,
  LastLoginTS datetime DEFAULT NULL,
  TimerBonusLastPickup datetime DEFAULT NULL,
  LastDailySpinTS datetime DEFAULT NULL,
  ConsecutiveDailySpins tinyint(4) UNSIGNED DEFAULT NULL,
  NextSpinSetup mediumtext DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 54
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table branduserstateactiontypes
--
CREATE TABLE branduserstateactiontypes (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table brandusertags
--
CREATE TABLE brandusertags (
  Id bigint(20) NOT NULL,
  BUID bigint(20) UNSIGNED NOT NULL,
  TagId int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id),
  UNIQUE INDEX UQ_BUID_TagId (BUID, TagId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 655
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table coupon
--
CREATE TABLE coupon (
  Id bigint(20) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  GeneratedBy varchar(255) NOT NULL,
  CreatedTS datetime NOT NULL,
  Type tinyint(4) UNSIGNED NOT NULL,
  Code varchar(255) NOT NULL,
  Value decimal(14, 2) NOT NULL,
  RedeemCapacity int(11) UNSIGNED NOT NULL,
  RemainingRedeems int(11) UNSIGNED NOT NULL,
  ExpiresTS datetime NOT NULL,
  Version int(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (Id),
  UNIQUE INDEX UK_coupon_Code (Code)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 409
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table couponconfig
--
CREATE TABLE couponconfig (
  Id smallint(6) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  Type tinyint(4) UNSIGNED NOT NULL,
  Value decimal(14, 2) NOT NULL,
  RedeemCapacity int(11) UNSIGNED NOT NULL,
  ExpiresInHours smallint(6) NOT NULL,
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table couponredeemers
--
CREATE TABLE couponredeemers (
  Id bigint(20) UNSIGNED NOT NULL,
  RedeemedCouponId bigint(20) UNSIGNED NOT NULL,
  RedeemingUserId bigint(20) UNSIGNED NOT NULL,
  RedeemTS datetime NOT NULL,
  PRIMARY KEY (Id),
  UNIQUE INDEX UK_couponredeemers (RedeemedCouponId, RedeemingUserId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table currencies
--
CREATE TABLE currencies (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table daily_activity_last_collection
--
CREATE TABLE daily_activity_last_collection (
  last_collection_date datetime NOT NULL
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table daily_activity_log
--
CREATE TABLE daily_activity_log (
  log_id int(10) NOT NULL AUTO_INCREMENT,
  run_id int(10) NOT NULL,
  step varchar(50) NOT NULL,
  creation_time timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  numeric_value int(10) NOT NULL,
  PRIMARY KEY (log_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 2928718
AVG_ROW_LENGTH = 53
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table dailyspinlevelsconfig
--
CREATE TABLE dailyspinlevelsconfig (
  Id int(11) UNSIGNED NOT NULL,
  FromLevel int(11) UNSIGNED NOT NULL,
  ToLevel int(11) UNSIGNED NOT NULL,
  SetId int(11) UNSIGNED NOT NULL,
  Version int(11) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table dailyspinmultipliersetoptions
--
CREATE TABLE dailyspinmultipliersetoptions (
  Id int(11) UNSIGNED NOT NULL,
  MultiplierSetId int(11) UNSIGNED NOT NULL,
  Multiplier float NOT NULL,
  DayOrdinal tinyint(4) UNSIGNED NOT NULL,
  Version int(11) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1638
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table dailyspinmultipliersets
--
CREATE TABLE dailyspinmultipliersets (
  Id int(11) NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  IsDefault tinyint(4) UNSIGNED NOT NULL DEFAULT 0,
  Version int(11) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table dailyspinset
--
CREATE TABLE dailyspinset (
  Id int(11) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  Name varchar(255) NOT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  IsDefault tinyint(4) UNSIGNED NOT NULL DEFAULT 0,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table dailyspinsetoptions
--
CREATE TABLE dailyspinsetoptions (
  Id int(11) UNSIGNED NOT NULL,
  LevelConfigId int(11) UNSIGNED NOT NULL,
  Ordinal tinyint(4) UNSIGNED NOT NULL DEFAULT 1,
  Amount decimal(14, 2) NOT NULL,
  BGColor int(11) UNSIGNED NOT NULL,
  Weight smallint(6) UNSIGNED NOT NULL,
  Version int(11) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 128
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table days_dummy
--
CREATE TABLE days_dummy (
  num smallint(5) NOT NULL,
  UNIQUE INDEX days_dummy_pk (num)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 66
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table facebookachievements
--
CREATE TABLE facebookachievements (
  Id int(11) UNSIGNED NOT NULL,
  Type tinyint(4) UNSIGNED NOT NULL,
  BrandId bigint(20) NOT NULL,
  Title varchar(255) NOT NULL,
  Description varchar(255) DEFAULT NULL,
  Url varchar(255) NOT NULL,
  ImageUrl varchar(255) DEFAULT NULL,
  Points int(11) NOT NULL,
  CampaignId varchar(255) DEFAULT NULL,
  MetaData varchar(255) DEFAULT NULL,
  Version int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id),
  UNIQUE INDEX Url (Url)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table gamefreespins
--
CREATE TABLE gamefreespins (
  Id bigint(20) NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  BrandGameId int(10) UNSIGNED NOT NULL,
  RemainingFreeSpins int(11) DEFAULT NULL,
  BetLines int(11) DEFAULT NULL,
  BetAmount decimal(14, 2) DEFAULT NULL,
  CreatedTS datetime DEFAULT NULL,
  TotalAmountWon decimal(14, 2) UNSIGNED DEFAULT NULL,
  OriginalSpinHistoryId bigint(20) UNSIGNED NOT NULL,
  CanRecover bit(1) DEFAULT b'0',
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_GameFreeSpins_BrandGames1 (BrandGameId),
  INDEX fk_GameFreeSpins_BrandUsers1 (BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 89
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table games
--
CREATE TABLE games (
  Id smallint(5) UNSIGNED NOT NULL,
  GameTypeId tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_Games_GameTypes1 (GameTypeId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1638
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table gametypes
--
CREATE TABLE gametypes (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table gameuserstate
--
CREATE TABLE gameuserstate (
  Id bigint(20) NOT NULL,
  BUID bigint(20) NOT NULL,
  BrandGameId int(10) UNSIGNED NOT NULL,
  AvailableFreeSpins smallint(6) DEFAULT NULL,
  FreeSpinsLineBet decimal(10, 2) DEFAULT NULL,
  BonusRoundPending tinyint(1) DEFAULT NULL,
  CurrentLuckyCoins tinyint(4) UNSIGNED DEFAULT NULL,
  LuckyCoinsCollectStartTS datetime DEFAULT NULL,
  LuckyCoinsCollectExpireTS datetime DEFAULT NULL,
  LuckyCoinsCurrentReward decimal(14, 2) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_GameUserState_BrandGames1 (BrandGameId),
  INDEX fk_GameUserState_BrandUsers1 (BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 78
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table generalaudit
--
CREATE TABLE generalaudit (
  Id bigint(20) NOT NULL,
  UserName varchar(45) NOT NULL,
  TableName varchar(45) NOT NULL,
  FieldName varchar(45) NOT NULL,
  OldValue varchar(100) NOT NULL,
  CreatedTS datetime NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 79
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table gifts
--
CREATE TABLE gifts (
  Id smallint(5) UNSIGNED NOT NULL,
  Name varchar(50) DEFAULT NULL,
  Type int(11) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table globalleaderboard
--
CREATE TABLE globalleaderboard (
  Id int(11) UNSIGNED NOT NULL,
  Name varchar(255) DEFAULT NULL,
  PicUrl varchar(2000) DEFAULT NULL,
  CurrentLevel int(11) DEFAULT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  CreatedTS datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 303
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table hibernate_unique_key
--
CREATE TABLE hibernate_unique_key (
  TableName varchar(50) NOT NULL,
  next_hi bigint(20) DEFAULT NULL,
  PRIMARY KEY (TableName)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 315
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table levelconfigsets
--
CREATE TABLE levelconfigsets (
  Id smallint(5) UNSIGNED NOT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  SocialNetworkId tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  StartingPlayCoinsAmount decimal(14, 2) NOT NULL,
  ViralBonusAmount decimal(14, 2) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_LevelConfigSets_Brands1 (BrandId),
  INDEX fk_LevelConfigSets_SocialNetworks1 (SocialNetworkId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table levelsconfig
--
CREATE TABLE levelsconfig (
  Id int(10) UNSIGNED NOT NULL,
  LevelConfigSetId smallint(5) UNSIGNED NOT NULL,
  LevelName varchar(45) NOT NULL,
  Ordinal int(11) NOT NULL,
  GiftPlayCoinsAmount decimal(14, 2) DEFAULT NULL,
  TimerBonusAmount decimal(14, 2) DEFAULT NULL,
  LevelReachedBonusAmount decimal(14, 2) DEFAULT NULL,
  MaxLineBetAmount decimal(14, 2) DEFAULT NULL,
  DefaultBetAmount decimal(14, 2) DEFAULT NULL,
  RequiredXP decimal(14, 2) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_LevelsConfig_LevelConfigSets1 (LevelConfigSetId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 94
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table localizedtexts
--
CREATE TABLE localizedtexts (
  Id int(11) UNSIGNED NOT NULL,
  Locale varchar(255) NOT NULL,
  TextId varchar(255) NOT NULL,
  GameId smallint(6) DEFAULT NULL,
  Text varchar(1000) NOT NULL,
  Version int(11) NOT NULL,
  PRIMARY KEY (Id),
  INDEX IDX_L10NTexts_Locale (Locale),
  INDEX IDX_localizedtexts_TextId (TextId),
  UNIQUE INDEX UK_localizedtexts (Locale, TextId, GameId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 124
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table localizedtexts_copy
--
CREATE TABLE localizedtexts_copy (
  Id int(11) UNSIGNED NOT NULL,
  Locale varchar(255) NOT NULL,
  TextId varchar(255) NOT NULL,
  GameId smallint(6) DEFAULT NULL,
  Text varchar(1000) NOT NULL,
  Version int(11) NOT NULL,
  PRIMARY KEY (Id),
  INDEX IDX_L10NTexts_Locale (Locale),
  INDEX IDX_localizedtexts_TextId (TextId),
  UNIQUE INDEX UK_localizedtexts (Locale, TextId, GameId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 124
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table luckycoinsconfig
--
CREATE TABLE luckycoinsconfig (
  Id smallint(6) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  Ordinal tinyint(4) UNSIGNED NOT NULL,
  Probability decimal(6, 5) UNSIGNED NOT NULL,
  BonusAmount decimal(14, 2) UNSIGNED DEFAULT NULL,
  Version int(11) NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 3276
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table marketingbanners
--
CREATE TABLE marketingbanners (
  Id int(10) UNSIGNED NOT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  Name varchar(50) NOT NULL,
  BannerPlaceHolder tinyint(4) UNSIGNED NOT NULL,
  ImageUrl varchar(500) NOT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  IsDefault tinyint(1) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX FK_Brand_idx (BrandId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationsqueue
--
CREATE TABLE notificationsqueue (
  Id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  SocialNetworkUserId varchar(255) NOT NULL,
  BUID bigint(20) UNSIGNED NOT NULL,
  Text varchar(180) NOT NULL,
  ParametersValue varchar(1000) DEFAULT NULL COMMENT 'json formatted key/value array',
  ActiveNotificationId int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AUTO_INCREMENT = 3211518
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table notificationtags
--
CREATE TABLE notificationtags (
  ActiveNotificationTargetId bigint(20) UNSIGNED NOT NULL,
  UserTagId int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (ActiveNotificationTargetId, UserTagId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationtemplate
--
CREATE TABLE notificationtemplate (
  Id int(11) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  Name varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  Text varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  SocialNotificationText varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  BGImageUrl varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  ActionButtonImageUrl varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  ActionButtonMouseOverUrl varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  ActionDisabledButtonURL varchar(255) DEFAULT NULL,
  CloseImageUrl varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  CloseMouseOverImageUrl varchar(255) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL,
  CloseDisabledButtonUrl varchar(255) DEFAULT NULL,
  Type tinyint(4) UNSIGNED NOT NULL,
  MaxTimesToShow tinyint(4) UNSIGNED NOT NULL,
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1143
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationtemplatelocalizationconfig
--
CREATE TABLE notificationtemplatelocalizationconfig (
  Id int(11) UNSIGNED NOT NULL,
  NotificationTemplateId int(11) NOT NULL,
  Locale varchar(255) NOT NULL,
  LocalizedTextId varchar(255) DEFAULT NULL,
  LocalizedSocialNotificationTextId varchar(255) DEFAULT NULL,
  BGImageUrl varchar(255) DEFAULT NULL,
  ActionButtonImageUrl varchar(255) DEFAULT NULL,
  ActionButtonMouseOverUrl varchar(255) DEFAULT NULL,
  ActionDisabledButtonURL varchar(255) DEFAULT NULL,
  CloseImageUrl varchar(255) DEFAULT NULL,
  CloseMouseOverImageUrl varchar(255) DEFAULT NULL,
  CloseDisabledButtonUrl varchar(255) DEFAULT NULL,
  Version int(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (Id),
  INDEX IDX_notificationtemplatelocali (NotificationTemplateId, Locale)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 840
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationtemplatepaymentitems
--
CREATE TABLE notificationtemplatepaymentitems (
  Id int(11) UNSIGNED NOT NULL,
  NotificationTemplateId int(11) UNSIGNED NOT NULL,
  PaymentItemId smallint(6) UNSIGNED NOT NULL,
  Ordinal tinyint(4) UNSIGNED NOT NULL,
  Version int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id),
  INDEX IX_notificationtemplatepaymentitems_NotificationTemplateId (NotificationTemplateId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1260
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationtriggers
--
CREATE TABLE notificationtriggers (
  NotificationTemplateId int(11) UNSIGNED NOT NULL,
  `Trigger` tinyint(4) UNSIGNED NOT NULL,
  PRIMARY KEY (NotificationTemplateId, `Trigger`)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 356
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationviews
--
CREATE TABLE notificationviews (
  BUID bigint(20) UNSIGNED NOT NULL,
  ActiveNotificationTargetId bigint(20) UNSIGNED NOT NULL,
  CountViews smallint(6) UNSIGNED NOT NULL,
  NotificationButtonClicked tinyint(4) UNSIGNED NOT NULL,
  IsNotificationButtonProcessed bit(1) DEFAULT NULL,
  SocialNotificationSent tinyint(1) DEFAULT NULL,
  Version int(11) UNSIGNED NOT NULL DEFAULT 1,
  PRIMARY KEY (BUID, ActiveNotificationTargetId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 57
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table paymentitems
--
CREATE TABLE paymentitems (
  Id smallint(5) UNSIGNED NOT NULL,
  OrderCode varchar(100) DEFAULT NULL,
  Price decimal(14, 2) DEFAULT NULL,
  CoinsValue decimal(14, 2) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 252
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table paymentitemsets
--
CREATE TABLE paymentitemsets (
  Id smallint(5) UNSIGNED NOT NULL,
  Name varchar(100) DEFAULT NULL,
  BrandId smallint(5) UNSIGNED NOT NULL,
  ValidFrom datetime DEFAULT NULL,
  ValidTo datetime DEFAULT NULL,
  IsDefault tinyint(1) DEFAULT NULL,
  ImageURL varchar(255) DEFAULT NULL,
  DefaultPaymentItemOrdinal tinyint(4) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_PaymentSets_Brands1 (BrandId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 862
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table paymentitemsinpaymentset
--
CREATE TABLE paymentitemsinpaymentset (
  Id smallint(5) NOT NULL,
  PaymentItemId smallint(5) UNSIGNED NOT NULL,
  PaymentItemSetId smallint(5) UNSIGNED NOT NULL,
  Ordinal tinyint(4) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_GameItemsInGameSet_GameSets1 (PaymentItemSetId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 143
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table paymenttransactions
--
CREATE TABLE paymenttransactions (
  Id bigint(20) NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  PaymentItemSetId smallint(5) DEFAULT NULL,
  PaymentItemId smallint(5) UNSIGNED NOT NULL,
  SocialTransactionId varchar(50) DEFAULT NULL,
  Status tinyint(3) UNSIGNED DEFAULT NULL,
  Price decimal(14, 2) DEFAULT NULL,
  CoinsValue decimal(14, 2) DEFAULT NULL,
  CreatedTS datetime DEFAULT NULL,
  UpdatedTS datetime DEFAULT NULL,
  UserPlatform tinyint(3) UNSIGNED DEFAULT NULL,
  ServerResponse varchar(1000) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_Payments_BrandUsers2 (BUID),
  INDEX fk_Payments_GameItems1 (PaymentItemId),
  INDEX fk_Payments_GameSets1 (PaymentItemSetId),
  INDEX paymenttransactions_date_idx (CreatedTS)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table registrationtagsconfig
--
CREATE TABLE registrationtagsconfig (
  Id int(11) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  ConfigType tinyint(4) UNSIGNED NOT NULL,
  TagId int(11) UNSIGNED DEFAULT NULL,
  RoundRobinTags varchar(255) DEFAULT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  Frequency smallint(6) UNSIGNED DEFAULT NULL,
  Version int(11) NOT NULL,
  PRIMARY KEY (Id),
  INDEX IX_registrationtagsconfig_BrandId (BrandId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotgameconfig
--
CREATE TABLE slotgameconfig (
  Id int(10) UNSIGNED NOT NULL,
  MaxLines int(11) DEFAULT NULL,
  DefaultReelSetId smallint(6) DEFAULT NULL,
  MobileDefaultReelSetId smallint(5) UNSIGNED DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 381
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotlevelconfig
--
CREATE TABLE slotlevelconfig (
  Id int(10) UNSIGNED NOT NULL,
  GiftSpins int(11) DEFAULT NULL,
  AutoSpinAmount int(11) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotpaylines
--
CREATE TABLE slotpaylines (
  Id tinyint(3) UNSIGNED NOT NULL,
  LineNumber int(11) NOT NULL,
  Reel1Index int(11) NOT NULL,
  Reel2Index int(11) NOT NULL,
  Reel3Index int(11) NOT NULL,
  Reel4Index int(11) NOT NULL,
  Reel5Index int(11) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 409
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotpayouttable
--
CREATE TABLE slotpayouttable (
  Id smallint(5) UNSIGNED NOT NULL,
  SlotSymbolId smallint(5) UNSIGNED NOT NULL,
  BrandGameId int(10) UNSIGNED NOT NULL,
  TwoInRowValue varchar(45) DEFAULT NULL,
  ThreeInRowValue varchar(45) DEFAULT NULL,
  FourInRowValue varchar(45) DEFAULT NULL,
  FiveInRowValue varchar(45) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_SlotPayoutTable_BrandGames1 (BrandGameId),
  INDEX fk_SlotPayoutTable_SlotSymbols1 (SlotSymbolId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 102
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotreels
--
CREATE TABLE slotreels (
  Id smallint(5) UNSIGNED NOT NULL,
  ReelSetId smallint(6) DEFAULT NULL,
  PositionIndex int(11) NOT NULL,
  Reel1SymbolId smallint(5) UNSIGNED NOT NULL,
  Reel2SymbolId smallint(5) UNSIGNED NOT NULL,
  Reel3SymbolId smallint(5) UNSIGNED NOT NULL,
  Reel4SymbolId smallint(5) UNSIGNED NOT NULL,
  Reel5SymbolId smallint(5) UNSIGNED NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_SlotReels_SlotSymbols1 (Reel1SymbolId),
  INDEX fk_SlotReels_SlotSymbols2 (Reel2SymbolId),
  INDEX fk_SlotReels_SlotSymbols3 (Reel3SymbolId),
  INDEX fk_SlotReels_SlotSymbols4 (Reel4SymbolId),
  INDEX fk_SlotReels_SlotSymbols5 (Reel5SymbolId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 90
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotreelsets
--
CREATE TABLE slotreelsets (
  Id smallint(6) UNSIGNED NOT NULL,
  GameId smallint(6) UNSIGNED NOT NULL,
  Name varchar(255) NOT NULL,
  Version int(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 356
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotspintypes
--
CREATE TABLE slotspintypes (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotsymbols
--
CREATE TABLE slotsymbols (
  Id smallint(5) UNSIGNED NOT NULL,
  GameId smallint(5) UNSIGNED NOT NULL,
  TypeId tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) DEFAULT NULL,
  Ordinal int(11) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_SlotSymbols_Games1 (GameId),
  INDEX fk_SlotSymbols_SlotSymbolTypes1 (TypeId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 151
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotsymboltypes
--
CREATE TABLE slotsymboltypes (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table socialnetworks
--
CREATE TABLE socialnetworks (
  Id tinyint(3) UNSIGNED NOT NULL,
  Name varchar(45) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  UNIQUE INDEX Name_UNIQUE (Name)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tagoverrideconfig
--
CREATE TABLE tagoverrideconfig (
  Id int(11) UNSIGNED NOT NULL,
  UserTagId int(11) UNSIGNED NOT NULL,
  BrandId smallint(6) UNSIGNED NOT NULL,
  ActiveFrom datetime DEFAULT NULL,
  ActiveTo datetime DEFAULT NULL,
  OverrideType tinyint(4) UNSIGNED NOT NULL,
  OverrideValue varchar(255) NOT NULL,
  IsEnabled bit(1) NOT NULL DEFAULT b'1',
  Version int(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (Id),
  INDEX IX_tagoverrideconfig_UserTagId (UserTagId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 4096
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table tagspresets
--
CREATE TABLE tagspresets (
  Id bigint(20) UNSIGNED NOT NULL,
  RegistrationTagConfigId int(11) UNSIGNED NOT NULL,
  SocialNetworkId tinyint(4) UNSIGNED NOT NULL,
  SocialNetworkUserId varchar(255) NOT NULL,
  PRIMARY KEY (Id),
  INDEX IX_tagspresets_SocialNetworkUserId (SocialNetworkUserId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_gifts
--
CREATE TABLE temp_daily_activity_gifts (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  GiftsSent int(10) UNSIGNED NOT NULL,
  GiftsReceived int(10) UNSIGNED NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 21
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_gifts_history
--
CREATE TABLE temp_daily_activity_gifts_history (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  GiftsSent int(10) UNSIGNED NOT NULL,
  GiftsReceived int(10) UNSIGNED NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 21
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_logins
--
CREATE TABLE temp_daily_activity_logins (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  Logins int(10) UNSIGNED NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 17
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_payments
--
CREATE TABLE temp_daily_activity_payments (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  Deposits int(10) UNSIGNED NOT NULL,
  DepositsSum decimal(14, 2) NOT NULL,
  IncompleteDeposits int(10) UNSIGNED NOT NULL,
  FirstDepositDate tinyint(1) NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 29
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_spins
--
CREATE TABLE temp_daily_activity_spins (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  Spins int(10) UNSIGNED NOT NULL,
  TotalBets decimal(14, 2) NOT NULL,
  TotalFreeBets decimal(14, 2) DEFAULT NULL,
  TotalWinAmount decimal(14, 2) NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 38
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table temp_daily_activity_state
--
CREATE TABLE temp_daily_activity_state (
  ActivityDate datetime NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  Spins int(10) UNSIGNED NOT NULL,
  TotalBets decimal(14, 2) NOT NULL,
  TotalWinAmount decimal(14, 2) NOT NULL,
  LastBalance decimal(14, 2) NOT NULL,
  LastLevel int(10) UNSIGNED NOT NULL,
  MaxSpinsPossible int(10) UNSIGNED NOT NULL,
  BonusesCollected int(10) UNSIGNED NOT NULL,
  SumBonusesCollected decimal(14, 2) NOT NULL,
  BonusesGranted int(10) UNSIGNED NOT NULL,
  SumBonusesGranted decimal(14, 2) NOT NULL,
  PRIMARY KEY (ActivityDate, BUID)
)
ENGINE = MEMORY
AVG_ROW_LENGTH = 68
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table users
--
CREATE TABLE users (
  Id bigint(20) NOT NULL,
  SocialNetworkUserId varchar(255) DEFAULT NULL,
  ExternalNetworkUserId varchar(255) DEFAULT NULL,
  Gender bit(1) DEFAULT NULL,
  SocialNetworkId tinyint(3) UNSIGNED NOT NULL,
  FirstName varchar(100) DEFAULT NULL,
  LastName varchar(100) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_Users_SocialNetworks1 (SocialNetworkId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 64
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table usertags
--
CREATE TABLE usertags (
  Id int(11) UNSIGNED NOT NULL,
  Name varchar(255) NOT NULL,
  Version int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1820
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table xpinatorconfigparams
--
CREATE TABLE xpinatorconfigparams (
  Id smallint(5) UNSIGNED NOT NULL,
  ParamName varchar(100) NOT NULL,
  BrandId smallint(5) UNSIGNED DEFAULT NULL,
  UserPlatformId smallint(5) UNSIGNED DEFAULT NULL,
  Value varchar(255) NOT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 496
CHARACTER SET utf8
COLLATE utf8_general_ci;

-- 
-- Set default database
--
USE xpinatordb_history;

--
-- Definition for table branduserstateaudit
--
CREATE TABLE branduserstateaudit (
  Id bigint(20) NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  RelatedActionType tinyint(3) UNSIGNED NOT NULL,
  RelatedActionId varchar(50) DEFAULT NULL,
  BalanceDelta decimal(14, 2) NOT NULL,
  PreviousBalance decimal(14, 2) NOT NULL,
  XPDelta decimal(14, 2) NOT NULL,
  PreviousXP decimal(14, 2) NOT NULL,
  CreatedBy varchar(45) NOT NULL,
  CreatedTS datetime DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX branduserstateaudit_date_idx (CreatedTS),
  INDEX fk_BalanceAudit_BrandUsers1 (BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 99
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table giftshistory
--
CREATE TABLE giftshistory (
  Id bigint(20) NOT NULL,
  SenderId bigint(20) NOT NULL,
  ReceiverId bigint(20) NOT NULL,
  BrandGiftId smallint(5) UNSIGNED NOT NULL,
  GiftValues varchar(200) DEFAULT NULL,
  SentTS datetime DEFAULT NULL,
  GiftOriginType int(11) DEFAULT NULL,
  CollectedTS datetime DEFAULT NULL,
  ExpiredTS datetime DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_giftshistory_brandbifts1 (BrandGiftId),
  INDEX giftshistory_date_idx (SentTS)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 190
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table hibernate_unique_key
--
CREATE TABLE hibernate_unique_key (
  TableName varchar(50) NOT NULL,
  next_hi bigint(20) DEFAULT NULL,
  PRIMARY KEY (TableName)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2048
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table loginhistory
--
CREATE TABLE loginhistory (
  Id bigint(20) NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  LoginDate datetime NOT NULL,
  IsGameLoaded bit(1) DEFAULT NULL,
  SecondsToLoadGame decimal(5, 1) DEFAULT NULL,
  IPAddress int(10) UNSIGNED DEFAULT NULL,
  UserPlatform tinyint(3) UNSIGNED DEFAULT NULL,
  SessionId varchar(45) DEFAULT NULL,
  ReferrerUrl varchar(500) DEFAULT NULL,
  SocialNetworkReferrer varchar(50) DEFAULT NULL,
  QueryString varchar(255) DEFAULT NULL,
  Version int(11) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_LoginHistory_BrandUsers1 (BUID),
  INDEX loginhistory_date_idx (LoginDate)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 97
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table luckycoinshistory
--
CREATE TABLE luckycoinshistory (
  Id bigint(20) UNSIGNED NOT NULL,
  BUID bigint(20) UNSIGNED NOT NULL,
  BrandGameId smallint(6) UNSIGNED NOT NULL,
  CollectStartTS datetime NOT NULL,
  CollectFinishTS datetime DEFAULT NULL,
  CoinsCollected tinyint(4) UNSIGNED NOT NULL,
  FinalReward decimal(14, 2) UNSIGNED DEFAULT NULL,
  Status tinyint(4) NOT NULL,
  PRIMARY KEY (Id),
  INDEX IX_luckycoinshistory_BrandGameId (BrandGameId),
  INDEX IX_luckycoinshistory_BUID (BUID)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 120
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table notificationsqueuehistory
--
CREATE TABLE notificationsqueuehistory (
  Id bigint(20) UNSIGNED NOT NULL,
  SocialNetworkUserId varchar(255) NOT NULL,
  SocialNetworkId tinyint(4) UNSIGNED NOT NULL,
  BUID bigint(20) UNSIGNED NOT NULL,
  Text varchar(180) NOT NULL,
  ParametersValue varchar(1000) DEFAULT NULL COMMENT 'json formatted key/value array',
  ActiveNotificationId int(11) UNSIGNED NOT NULL,
  Status tinyint(4) DEFAULT NULL,
  CreatedTS datetime DEFAULT NULL,
  ErrorMessage varchar(255) DEFAULT NULL,
  Version int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 160
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table slotbonusroundhistory
--
CREATE TABLE slotbonusroundhistory (
  Id bigint(20) NOT NULL,
  BonusRoundSummary varchar(1000) NOT NULL,
  PRIMARY KEY (Id)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Definition for table slotgamehistory
--
CREATE TABLE slotgamehistory (
  Id bigint(20) NOT NULL,
  BUID int(10) UNSIGNED NOT NULL,
  SlotSpinTypeId tinyint(3) UNSIGNED NOT NULL,
  ParentSpinId bigint(20) DEFAULT NULL,
  BrandGameId int(10) UNSIGNED NOT NULL,
  CreatedTS datetime NOT NULL,
  BetPerLineAmount decimal(14, 2) DEFAULT NULL,
  LinesSelected int(11) DEFAULT NULL,
  SpinResult text DEFAULT NULL,
  WinAmount decimal(14, 2) DEFAULT NULL,
  AutoSpinRoundsWon smallint(6) DEFAULT NULL,
  IsBonusRoundScored bit(1) DEFAULT NULL,
  BonusRoundMultiplierResult decimal(14, 2) DEFAULT NULL,
  BonusRoundAmountWon decimal(14, 2) DEFAULT NULL,
  UserPlatform tinyint(3) UNSIGNED DEFAULT NULL,
  ReelSetId smallint(6) DEFAULT NULL,
  PRIMARY KEY (Id),
  INDEX fk_SlotGameHistory_BrandGames1 (BrandGameId),
  INDEX fk_SlotGameHistory_BrandUsers1 (BUID),
  INDEX fk_SlotGameHistory_SlotGameHistory1 (ParentSpinId),
  INDEX fk_SlotGameHistory_SlotSpinTypes1 (SlotSpinTypeId)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 85
CHARACTER SET utf8
COLLATE utf8_general_ci;

-- 
-- Set default database
--
USE xplogdb;

--
-- Definition for table xplog
--
CREATE TABLE xplog (
  id int(11) NOT NULL AUTO_INCREMENT,
  TimeStamp datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  Message mediumtext DEFAULT NULL,
  level varchar(10) DEFAULT NULL,
  logger varchar(128) DEFAULT NULL,
  LoggingSourceMachine varchar(100) DEFAULT NULL,
  SessionId varchar(100) DEFAULT NULL,
  RemoteHost varchar(100) DEFAULT NULL,
  PRIMARY KEY (id, TimeStamp)
)
ENGINE = INNODB
AUTO_INCREMENT = 47562
AVG_ROW_LENGTH = 1293
CHARACTER SET utf8
COLLATE utf8_general_ci
PARTITION BY RANGE (TO_DAYS(`TimeStamp`))
(
PARTITION p20121218 VALUES LESS THAN (735221),
PARTITION p20121219 VALUES LESS THAN (735222),
PARTITION p20121220 VALUES LESS THAN (735223),
PARTITION p20121221 VALUES LESS THAN (735224),
PARTITION p20121222 VALUES LESS THAN (735225),
PARTITION p20121223 VALUES LESS THAN (735226),
PARTITION p20121224 VALUES LESS THAN (735227),
PARTITION p20121225 VALUES LESS THAN (735228),
PARTITION p20121226 VALUES LESS THAN (735229),
PARTITION p20121227 VALUES LESS THAN (735230),
PARTITION p20121228 VALUES LESS THAN (735231),
PARTITION p20121229 VALUES LESS THAN (735232),
PARTITION p20121230 VALUES LESS THAN (735233),
PARTITION p20121231 VALUES LESS THAN (735234),
PARTITION p20130101 VALUES LESS THAN (735235),
PARTITION p20130102 VALUES LESS THAN (735236),
PARTITION p20130103 VALUES LESS THAN (735237),
PARTITION p20130104 VALUES LESS THAN (735238),
PARTITION p20130105 VALUES LESS THAN (735239),
PARTITION p20130106 VALUES LESS THAN (735240),
PARTITION p20130107 VALUES LESS THAN (735241),
PARTITION p20130108 VALUES LESS THAN (735242),
PARTITION p20130109 VALUES LESS THAN (735243),
PARTITION p20130110 VALUES LESS THAN (735244),
PARTITION p20130111 VALUES LESS THAN (735245),
PARTITION p20130112 VALUES LESS THAN (735246),
PARTITION p20130113 VALUES LESS THAN (735247),
PARTITION p20130114 VALUES LESS THAN (735248),
PARTITION p20130115 VALUES LESS THAN (735249),
PARTITION p20130116 VALUES LESS THAN (735250),
PARTITION p20130117 VALUES LESS THAN (735251),
PARTITION p20130118 VALUES LESS THAN (735252),
PARTITION p20130119 VALUES LESS THAN (735253),
PARTITION p20130120 VALUES LESS THAN (735254),
PARTITION p20130121 VALUES LESS THAN (735255),
PARTITION p20130122 VALUES LESS THAN (735256),
PARTITION p20130123 VALUES LESS THAN (735257),
PARTITION p20130124 VALUES LESS THAN (735258),
PARTITION p20130125 VALUES LESS THAN (735259),
PARTITION p20130126 VALUES LESS THAN (735260),
PARTITION p20130127 VALUES LESS THAN (735261),
PARTITION p20130128 VALUES LESS THAN (735262),
PARTITION p20130129 VALUES LESS THAN (735263),
PARTITION p20130130 VALUES LESS THAN (735264),
PARTITION p20130131 VALUES LESS THAN (735265),
PARTITION p20130201 VALUES LESS THAN (735266),
PARTITION p20130202 VALUES LESS THAN (735267),
PARTITION p20130203 VALUES LESS THAN (735268),
PARTITION p20130204 VALUES LESS THAN (735269),
PARTITION p20130205 VALUES LESS THAN (735270),
PARTITION p20130206 VALUES LESS THAN (735271),
PARTITION p20130207 VALUES LESS THAN (735272),
PARTITION p20130208 VALUES LESS THAN (735273),
PARTITION p20130209 VALUES LESS THAN (735274),
PARTITION p20130210 VALUES LESS THAN (735275),
PARTITION p20130211 VALUES LESS THAN (735276),
PARTITION p20130212 VALUES LESS THAN (735277),
PARTITION p20130213 VALUES LESS THAN (735278),
PARTITION p20130214 VALUES LESS THAN (735279),
PARTITION p20130215 VALUES LESS THAN (735280),
PARTITION p20130216 VALUES LESS THAN (735281),
PARTITION p20130217 VALUES LESS THAN (735282),
PARTITION p20130218 VALUES LESS THAN (735283),
PARTITION p20130219 VALUES LESS THAN (735284),
PARTITION p20130220 VALUES LESS THAN (735285),
PARTITION p20130221 VALUES LESS THAN (735286),
PARTITION p20130222 VALUES LESS THAN (735287),
PARTITION p20130223 VALUES LESS THAN (735288),
PARTITION p20130224 VALUES LESS THAN (735289),
PARTITION p20130225 VALUES LESS THAN (735290),
PARTITION p20130226 VALUES LESS THAN (735291),
PARTITION PMAX VALUES LESS THAN (MAXVALUE)
);

-- 
-- Set default database
--
USE xpinatordb;

DELIMITER $$

--
-- Definition for procedure calculate_daily_activity_UNDER_CONSTRUCTION
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE calculate_daily_activity_UNDER_CONSTRUCTION ()
BEGIN

  DECLARE l_last_collection_date datetime;
  DECLARE l_end_date datetime DEFAULT UTC_TIMESTAMP() - INTERVAL 180 SECOND;

  DECLARE l_current_run_id int(10) DEFAULT UNIX_TIMESTAMP();


  -- we are going to run on the data created since our last run
  SELECT
    last_collection_date INTO l_last_collection_date
  FROM daily_activity_last_collection;


  -- clear temp tables which will hold aggregation of data created since last run

  TRUNCATE TABLE temp_daily_activity_logins;
  TRUNCATE TABLE temp_daily_activity_state;
  TRUNCATE TABLE temp_daily_activity_payments;
  TRUNCATE TABLE temp_daily_activity_gifts_history;
  TRUNCATE TABLE temp_daily_activity_spins;

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Start', UTC_TIMESTAMP(), 0);

  -- aggregate logins data since our last run
  -- notice i do < on the current end login date since i do not want to take data from the last second
  INSERT INTO temp_daily_activity_logins (ActivityDate, BUID, Logins)
    SELECT
      DATE_FORMAT(LoginDate, '%Y-%m-%d') part_date,
      BUID,
      COUNT(Id)
    FROM xpinatordb_history.loginhistory l
    WHERE l.LoginDate > l_last_collection_date AND
    l.LoginDate <= l_end_date
    GROUP BY BUID,
             DATE_FORMAT(LoginDate, '%Y-%m-%d');

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Prepared Logins', UTC_TIMESTAMP(), ROW_COUNT());

  -- aggregate all branduserstateaudit related data sicne our last run
  INSERT INTO temp_daily_activity_state (ActivityDate, BUID, LastBalance, LastLevel, MaxSpinsPossible,
  BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
    SELECT
      i.part_date,
      i.BUID,
      i.LastBalance,
      i.LastLevel,
      MAX(i.MaxLineBetAmount * sg.MaxLines),
      i.CountBonusesCollected,
      i.SumBonusesCollected,
      i.CountBonusesGranted,
      i.SumBonusesGranted
    FROM (SELECT
             s.part_date,
             s.BUID,
             s.LastBalance,
             s.CountBonusesCollected,
             s.SumBonusesCollected,
             s.CountBonusesGranted,
             s.SumBonusesGranted,
             bu.BrandId,
             MAX(ls.Ordinal) LastLevel,
             SUBSTR(MAX(CONCAT(LPAD(ls.id, 19, '0'), MaxLineBetAmount)), 20) AS MaxLineBetAmount
           FROM (SELECT
                    DATE_FORMAT(CreatedTS, '%Y-%m-%d') part_date,
                    BUID,

                    SUM(CASE
                        WHEN RelatedActionType IN (1, 5, 6, 15) THEN 1 ELSE 0
                      END) CountBonusesCollected, -- = timer bonus + level up bonus + daily spin + like bonus
                    SUM(CASE
                        WHEN RelatedActionType IN (1, 5, 6, 15) THEN BalanceDelta ELSE 0
                      END) SumBonusesCollected,
                    SUM(CASE
                        WHEN RelatedActionType IN (10, 11, 13) THEN 1 ELSE 0
                      END) CountBonusesGranted, -- = user notifications bonuses + manual bonuses
                    SUM(CASE
                        WHEN RelatedActionType IN (10, 11, 13) THEN BalanceDelta ELSE 0
                      END) SumBonusesGranted,
                    SUBSTR(MAX(CONCAT(LPAD(Id, 19, '0'), PreviousBalance)), 20) +
                    SUBSTR(MAX(CONCAT(LPAD(Id, 19, '0'), BalanceDelta)), 20) AS LastBalance,
                    SUBSTR(MAX(CONCAT(LPAD(Id, 19, '0'), PreviousXP)), 20) +
                    SUBSTR(MAX(CONCAT(LPAD(Id, 19, '0'), XPDelta)), 20) AS LastXP
                  FROM xpinatordb_history.branduserstateaudit s
                  WHERE s.CreatedTS > '2013-07-01 00:00:00' /* l_last_collection_date */ AND
                  s.CreatedTS <= '2013-07-04 23:00:00' /* l_last_collection_date */
                  GROUP BY BUID,
                           DATE_FORMAT(CreatedTS, '%Y-%m-%d')) s,
                xpinatordb.brandusers bu,
                xpinatordb.levelsconfig ls
           WHERE s.BUID = bu.id AND
           bu.LevelConfigSetId = ls.LevelConfigSetId AND
           ls.RequiredXP <= s.LastXP
           GROUP BY s.part_date,
                    s.BUID,
                    s.LastBalance,
                    BrandId) i,
         xpinatordb.brandgames bg,
         xpinatordb.slotgameconfig sg
    WHERE i.BrandId = bg.BrandId AND
    i.LastLevel >= bg.RequiredLevel AND
    bg.GameId = sg.Id
    GROUP BY i.part_date,
             i.BUID,
             i.LastBalance,
             i.LastLevel;

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Prepared State', UTC_TIMESTAMP(), ROW_COUNT());

  -- aggregate spin data
  INSERT INTO temp_daily_activity_spins (ActivityDate, BUID, Spins, TotalBets, TotalFreeBets, TotalWinAmount)
    SELECT
      DATE_FORMAT(CreatedTS, '%Y-%m-%d') ActivityDate,
      BUID,
      COUNT(s.Id) Spins, -- = normal spins + free spins
      SUM(CASE
          WHEN s.SlotSpinTypeId = 1 THEN s.LinesSelected * s.BetPerLineAmount ELSE 0
        END) TotalBets, -- = bets on normal spins only
      SUM(CASE
          WHEN s.SlotSpinTypeId = 2 THEN s.LinesSelected * s.BetPerLineAmount ELSE 0
        END) TotalFreeBets, -- = bets on normal spins only
      SUM(s.WinAmount) TotalWinAmount -- = money won on all spins (not including bonus games)
    FROM xpinatordb_history.slotgamehistory s
    WHERE CreatedTS > '2013-07-01 00:00:00' /* l_last_collection_date */ AND
    CreatedTS <= '2013-07-04 23:00:00' /* l_last_collection_date */
    GROUP BY BUID,
             DATE_FORMAT(CreatedTS, '%Y-%m-%d');

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Prepared Spins', UTC_TIMESTAMP(), ROW_COUNT());

  /* aggregate gifts related data since our last run
   since we need to get the sent and received data per user, and the table contains two user_id columns
   we join the data to a dummy table, containing two rows, and that allows us to create from that 1 user_id with sent and received data.
   example - say row is sender_id=82, receiver_id=5, we join that to dummy table (two rows with 1 and 2 as values) and get :
   sender_id receiver_id n
   82        5           1
   82        5           2
   now we can sum the data per user, no matter if he was the sender or the receiver */
  INSERT INTO temp_daily_activity_gifts_history (ActivityDate, BUID, GiftsSent, GiftsReceived)
    SELECT
      DATE_FORMAT(SentTS, '%Y-%m-%d') part_date,
      (CASE
          WHEN x.dummy = 1 THEN SenderId ELSE ReceiverId
        END) BUID,
      SUM(CASE
          WHEN x.dummy = 1 THEN 1 ELSE 0
        END) GiftsSent,
      SUM(CASE
          WHEN x.dummy = 2 THEN 1 ELSE 0
        END) GiftsReceived
    FROM xpinatordb_history.giftshistory g,
         (SELECT
             1 dummy
           UNION
           SELECT
             2 dummy) x
    WHERE g.SentTS > l_last_collection_date AND
    g.SentTS <= l_end_date
    GROUP BY DATE_FORMAT(SentTS, '%Y-%m-%d'),
             (CASE
                 WHEN x.dummy = 1 THEN SenderId ELSE ReceiverId
               END);

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Prepared Gifts (History)', UTC_TIMESTAMP(), ROW_COUNT());

  -- aggregate payments related data since our last run
  INSERT INTO temp_daily_activity_payments (ActivityDate, BUID, Deposits, DepositsSum, IncompleteDeposits, FirstDepositDate)
    SELECT
      DATE_FORMAT(p.CreatedTS, '%Y-%m-%d') part_date,
      p.BUID,
      SUM(CASE
          WHEN p.Status = 2 THEN 1 ELSE 0
        END) Deposits,
      SUM(CASE
          WHEN p.Status = 2 THEN Price ELSE 0
        END) DepositsSum,
      SUM(CASE
          WHEN p.Status = 1 THEN 1 ELSE 0
        END) IncompleteDeposits,
      MAX(CASE
          WHEN DATE_FORMAT(p.CreatedTS, '%Y-%m-%d') = DATE_FORMAT(br.FirstDepositDate, '%Y-%m-%d') THEN 1 ELSE 0
        END)
    FROM xpinatordb.paymenttransactions p,
         xpinatordb.brandusers br
    WHERE p.CreatedTS > l_last_collection_date AND
    p.CreatedTS <= l_end_date AND
    p.BUID = br.id
    GROUP BY p.BUID,
             DATE_FORMAT(p.CreatedTS, '%Y-%m-%d');

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Prepared Payments', UTC_TIMESTAMP(), ROW_COUNT());

  -- now we are going to update the actual BrandUserDailyActivity table, start a transaction, so only when we merged all the parts
  -- we will commit
  START TRANSACTION;

    -- merge the logins data. new rows will have 0/NULL in all non-logins related columns for now
    -- the logins data we got now is added to the current logins data, since this is a cumulative value
    -- Update - 09/12 - since there could be instances of just logins without any state change we will also
    -- recalc the values of lastX (balance,level,max spins) just in case, so we will always have values in them
    INSERT INTO BrandUserDailyActivity (ActivityDate, BUID,
    Logins,
    Spins, TotalBets, TotalFreeBets, TotalWinAmount,
    LastBalance, LastLevel, MaxSpinsPossible,
    Deposits, DepositsSum, IncompleteDeposits, FirstDepositDate,
    GiftsSent, GiftsReceived,
    BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
      SELECT
        *
      FROM (SELECT
          dat2.ActivityDate,
          dat2.BUID,
          dat2.Logins,
          0 Spins,
          0 TotalBets,
          0 TotalFreeBets,
          0 TotalWinAmount,
          dat2.LastBalance,
          dat2.LastLevel,
          MAX(dat2.MaxLineBetAmount * sg.MaxLines) AS MaxSpinsPossible,
          0 Deposits,
          0 DepositsSum,
          0 IncompleteDeposits,
          dat2.FirstDepositDate,
          0 GiftsSent,
          0 GiftsReceived,
          0 BonusesCollected,
          0 SumBonusesCollected,
          0 BonusesGranted,
          0 SumBonusesGranted
        FROM (SELECT
                 dat.ActivityDate,
                 dat.BUID,
                 dat.Logins,
                 dat.LastBalance,
                 MAX(ls.Ordinal) LastLevel,
                 SUBSTR(MAX(CONCAT(LPAD(ls.id, 19, '0'), MaxLineBetAmount)), 20) AS MaxLineBetAmount,
                 bu.BrandId,
                 (CASE
                     WHEN DATE_FORMAT(dat.ActivityDate, '%Y-%m-%d') = DATE_FORMAT(bu.FirstDepositDate, '%Y-%m-%d') THEN 1 ELSE 0
                   END) AS FirstDepositDate
               FROM (SELECT
                        t.ActivityDate,
                        t.BUID,
                        t.Logins,
                        bs.CurrentBalance LastBalance,
                        bs.CurrentXP LastXP
                      FROM temp_daily_activity_logins t,
                           xpinatordb.branduserstate bs
                      WHERE t.BUID = bs.Id) dat,
                    xpinatordb.brandusers bu,
                    xpinatordb.levelsconfig ls
               WHERE dat.BUID = bu.id AND
               bu.LevelConfigSetId = ls.LevelConfigSetId AND
               ls.RequiredXP <= dat.LastXP
               GROUP BY dat.ActivityDate,
                        dat.BUID,
                        dat.Logins,
                        dat.LastBalance,
                        bu.BrandId,
                        (CASE
                            WHEN DATE_FORMAT(dat.ActivityDate, '%Y-%m-%d') = DATE_FORMAT(bu.FirstDepositDate, '%Y-%m-%d') THEN 1 ELSE 0
                          END)) dat2,
             xpinatordb.brandgames bg,
             xpinatordb.slotgameconfig sg
        WHERE dat2.BrandId = bg.BrandId AND
        dat2.LastLevel >= bg.RequiredLevel AND
        bg.GameId = sg.Id
        GROUP BY dat2.ActivityDate,
                 dat2.BUID,
                 dat2.Logins,
                 dat2.LastBalance,
                 dat2.LastLevel,
                 dat2.FirstDepositDate) new_data
    ON DUPLICATE KEY UPDATE BrandUserDailyActivity.Logins = BrandUserDailyActivity.Logins + new_data.Logins,
    BrandUserDailyActivity.LastBalance = new_data.LastBalance,
    BrandUserDailyActivity.LastLevel = new_data.LastLevel,
    BrandUserDailyActivity.MaxSpinsPossible = new_data.MaxSpinsPossible,
    BrandUserDailyActivity.FirstDepositDate = new_data.FirstDepositDate;

    INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
      VALUES (l_current_run_id, 'Added Logins', UTC_TIMESTAMP(), ROW_COUNT());

    INSERT INTO BrandUserDailyActivity (ActivityDate, BUID,
    Logins,
    Spins, TotalBets, TotalFreeBets, TotalWinAmount, LastBalance, LastLevel, MaxSpinsPossible,
    Deposits, DepositsSum, IncompleteDeposits,
    GiftsSent, GiftsReceived,
    BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
      SELECT
        ActivityDate,
        BUID,
        0 Logins,
        Spins,
        TotalBets,
        TotalFreeBets,
        TotalWinAmount,
        0 LastBalance,
        0 LastLevel,
        0 MaxSpinsPossible,
        0 Deposits,
        0 DepositsSum,
        0 IncompleteDeposits,
        0 GiftsSent,
        0 GiftsReceived,
        0 BonusesCollected,
        0 SumBonusesCollected,
        0 BonusesGranted,
        0 SumBonusesGranted
      FROM temp_daily_activity_spins
    ON DUPLICATE KEY
    UPDATE BrandUserDailyActivity.Spins = BrandUserDailyActivity.Spins + temp_daily_activity_spins.Spins,
    BrandUserDailyActivity.TotalBets = BrandUserDailyActivity.TotalBets + temp_daily_activity_spins.TotalBets,
    BrandUserDailyActivity.TotalFreeBets = BrandUserDailyActivity.TotalFreeBets + temp_daily_activity_spins.TotalFreeBets,
    BrandUserDailyActivity.TotalWinAmount = BrandUserDailyActivity.TotalWinAmount + temp_daily_activity_spins.TotalWinAmount;

    INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
      VALUES (l_current_run_id, 'Added Spins', UTC_TIMESTAMP(), ROW_COUNT());

    -- merge the state related data. new rows will have 0/NULL in all non-state related columns for now
    -- some columns contain cumulative value, so we add the values we have from this run, and some 
    -- like last level or last balance or just being updated, not added
    INSERT INTO BrandUserDailyActivity (ActivityDate, BUID,
    Logins,
    Spins, TotalBets, TotalFreeBets, TotalWinAmount, LastBalance, LastLevel, MaxSpinsPossible,
    Deposits, DepositsSum, IncompleteDeposits,
    GiftsSent, GiftsReceived,
    BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
      SELECT
        ActivityDate,
        BUID,
        0 Logins,
        0 Spins,
        0 TotalBets,
        0 TotalFreeBets,
        0 TotalWinAmount,
        LastBalance,
        LastLevel,
        MaxSpinsPossible,
        0 Deposits,
        0 DepositsSum,
        0 IncompleteDeposits,
        0 GiftsSent,
        0 GiftsReceived,
        BonusesCollected,
        SumBonusesCollected,
        BonusesGranted,
        SumBonusesGranted
      FROM temp_daily_activity_state
    ON DUPLICATE KEY
    UPDATE
    BrandUserDailyActivity.LastBalance = temp_daily_activity_state.LastBalance,
    BrandUserDailyActivity.LastLevel = temp_daily_activity_state.LastLevel,
    BrandUserDailyActivity.MaxSpinsPossible = temp_daily_activity_state.MaxSpinsPossible,
    BrandUserDailyActivity.BonusesCollected = BrandUserDailyActivity.BonusesCollected + temp_daily_activity_state.BonusesCollected,
    BrandUserDailyActivity.SumBonusesCollected = BrandUserDailyActivity.SumBonusesCollected + temp_daily_activity_state.SumBonusesCollected,
    BrandUserDailyActivity.BonusesGranted = BrandUserDailyActivity.BonusesGranted + temp_daily_activity_state.BonusesGranted,
    BrandUserDailyActivity.SumBonusesGranted = BrandUserDailyActivity.SumBonusesGranted + temp_daily_activity_state.SumBonusesGranted;

    INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
      VALUES (l_current_run_id, 'Added State', UTC_TIMESTAMP(), ROW_COUNT());

    -- merge the payments data. new rows will have 0/NULL in all non-payments related columns for now
    -- all payments related columns have cumulative values
    INSERT INTO BrandUserDailyActivity (ActivityDate, BUID,
    Logins,
    Spins, TotalBets, TotalFreeBets, TotalWinAmount, LastBalance, LastLevel, MaxSpinsPossible,
    Deposits, DepositsSum, IncompleteDeposits, FirstDepositDate,
    GiftsSent, GiftsReceived,
    BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
      SELECT
        ActivityDate,
        BUID,
        0 Logins,
        0 Spins,
        0 TotalBets,
        0 TotalFreeBets,
        0 TotalWinAmount,
        NULL LastBalance,
        NULL LastLevel,
        0 MaxSpinsPossible,
        Deposits,
        DepositsSum,
        IncompleteDeposits,
        FirstDepositDate,
        0 GiftsSent,
        0 GiftsReceived,
        0 BonusesCollected,
        0 SumBonusesCollected,
        0 BonusesGranted,
        0 SumBonusesGranted
      FROM temp_daily_activity_payments
    ON DUPLICATE KEY
    UPDATE BrandUserDailyActivity.Deposits = BrandUserDailyActivity.Deposits + temp_daily_activity_payments.Deposits,
    BrandUserDailyActivity.DepositsSum = BrandUserDailyActivity.DepositsSum + temp_daily_activity_payments.DepositsSum,
    BrandUserDailyActivity.IncompleteDeposits = BrandUserDailyActivity.IncompleteDeposits + temp_daily_activity_payments.IncompleteDeposits,
    BrandUserDailyActivity.FirstDepositDate = BrandUserDailyActivity.FirstDepositDate;

    INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
      VALUES (l_current_run_id, 'Added Payments', UTC_TIMESTAMP(), ROW_COUNT());


    -- merge the active gifts data. new rows will have 0/NULL in all non-gifts related columns for now
    -- all gifts related columns have cumulative values
    INSERT INTO BrandUserDailyActivity (ActivityDate, BUID,
    Logins,
    Spins, TotalBets, TotalFreeBets, TotalWinAmount, LastBalance, LastLevel, MaxSpinsPossible,
    Deposits, DepositsSum, IncompleteDeposits, FirstDepositDate,
    GiftsSent, GiftsReceived,
    BonusesCollected, SumBonusesCollected, BonusesGranted, SumBonusesGranted)
      SELECT
        *
      FROM (SELECT
          dat2.ActivityDate,
          dat2.BUID,
          0 Logins,
          0 Spins,
          0 TotalBets,
          0 TotalFreeBets,
          0 TotalWinAmount,
          dat2.LastBalance,
          dat2.LastLevel,
          MAX(dat2.MaxLineBetAmount * sg.MaxLines) AS MaxSpinsPossible,
          0 Deposits,
          0 DepositsSum,
          0 IncompleteDeposits,
          dat2.FirstDepositDate,
          dat2.GiftsSent,
          dat2.GiftsReceived,
          0 BonusesCollected,
          0 SumBonusesCollected,
          0 BonusesGranted,
          0 SumBonusesGranted
        FROM (SELECT
                 dat.ActivityDate,
                 dat.BUID,
                 dat.GiftsSent,
                 dat.GiftsReceived,
                 dat.LastBalance,
                 MAX(ls.Ordinal) LastLevel,
                 SUBSTR(MAX(CONCAT(LPAD(ls.id, 19, '0'), MaxLineBetAmount)), 20) AS MaxLineBetAmount,
                 bu.BrandId,
                 (CASE
                     WHEN DATE_FORMAT(dat.ActivityDate, '%Y-%m-%d') = DATE_FORMAT(bu.FirstDepositDate, '%Y-%m-%d') THEN 1 ELSE 0
                   END) AS FirstDepositDate
               FROM (SELECT
                        t.ActivityDate,
                        t.BUID,
                        t.GiftsSent,
                        t.GiftsReceived,
                        bs.CurrentBalance LastBalance,
                        bs.CurrentXP LastXP
                      FROM temp_daily_activity_gifts_history t,
                           xpinatordb.branduserstate bs
                      WHERE t.BUID = bs.Id) dat,
                    xpinatordb.brandusers bu,
                    xpinatordb.levelsconfig ls
               WHERE dat.BUID = bu.id AND
               bu.LevelConfigSetId = ls.LevelConfigSetId AND
               ls.RequiredXP <= dat.LastXP
               GROUP BY dat.ActivityDate,
                        dat.BUID,
                        dat.GiftsSent,
                        dat.GiftsReceived,
                        dat.LastBalance,
                        bu.BrandId,
                        (CASE
                            WHEN DATE_FORMAT(dat.ActivityDate, '%Y-%m-%d') = DATE_FORMAT(bu.FirstDepositDate, '%Y-%m-%d') THEN 1 ELSE 0
                          END)) dat2,
             xpinatordb.brandgames bg,
             xpinatordb.slotgameconfig sg
        WHERE dat2.BrandId = bg.BrandId AND
        dat2.LastLevel >= bg.RequiredLevel AND
        bg.GameId = sg.Id
        GROUP BY dat2.ActivityDate,
                 dat2.BUID,
                 dat2.GiftsSent,
                 dat2.GiftsReceived,
                 dat2.LastBalance,
                 dat2.LastLevel,
                 dat2.FirstDepositDate) new_data
    ON DUPLICATE KEY UPDATE
    BrandUserDailyActivity.GiftsSent = BrandUserDailyActivity.GiftsSent + new_data.GiftsSent,
    BrandUserDailyActivity.GiftsReceived = BrandUserDailyActivity.GiftsReceived + new_data.GiftsReceived,
    BrandUserDailyActivity.LastBalance = new_data.LastBalance,
    BrandUserDailyActivity.LastLevel = new_data.LastLevel,
    BrandUserDailyActivity.MaxSpinsPossible = new_data.MaxSpinsPossible,
    BrandUserDailyActivity.FirstDepositDate = new_data.FirstDepositDate;


    INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
      VALUES (l_current_run_id, 'Added Gifts (History)', UTC_TIMESTAMP(), ROW_COUNT());


    -- finished, now update the last run dates for each of the data types to the end dates we used now
    UPDATE daily_activity_last_collection
    SET last_collection_date = l_end_date;

  COMMIT;

  INSERT INTO daily_activity_log (run_id, step, creation_time, numeric_value)
    VALUES (l_current_run_id, 'Finish', UTC_TIMESTAMP(), 0);


END
$$

--
-- Definition for procedure DEBUG_DeleteBrandUser
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE DEBUG_DeleteBrandUser (IN DeletedBuid bigint)
BEGIN
  DELETE
    FROM branduserstate
  WHERE id = DeletedBuid;
  DELETE
    FROM xpinatordb_history.loginhistory
  WHERE BUID = DeletedBuid;
  DELETE
    FROM xpinatordb_history.branduserstateaudit
  WHERE BUID = DeletedBuid;
  DELETE
    FROM paymenttransactions
  WHERE BUID = DeletedBuid;
  DELETE
    FROM gameuserstate
  WHERE BUID = DeletedBuid;
  DELETE
    FROM xpinatordb_history.slotgamehistory
  WHERE BUID = DeletedBuid;
  DELETE
    FROM brandusers
  WHERE Id = DeletedBuid;
  DELETE
    FROM activegifts
  WHERE ReceiverId = DeletedBuid;
  DELETE
    FROM xpinatordb_history.giftshistory
  WHERE ReceiverId = DeletedBuid;
  DELETE
    FROM activegifts
  WHERE SenderId = DeletedBuid;
  DELETE
    FROM xpinatordb_history.giftshistory
  WHERE SenderId = DeletedBuid;

END
$$

--
-- Definition for procedure DEBUG_DeleteUser
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE DEBUG_DeleteUser (IN deleteUserId bigint)
BEGIN
  DELETE
    FROM branduserstate
  WHERE id IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM xpinatordb_history.loginhistory
  WHERE BUID IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM xpinatordb_history.branduserstateaudit
  WHERE BUID IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM paymenttransactions
  WHERE BUID IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM gameuserstate
  WHERE BUID IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM xpinatordb_history.slotgamehistory
  WHERE BUID IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);

  DELETE
    FROM activegifts
  WHERE ReceiverId IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM activegifts
  WHERE SenderId IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM xpinatordb_history.giftshistory
  WHERE ReceiverId IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);
  DELETE
    FROM xpinatordb_history.giftshistory
  WHERE SenderId IN (SELECT
        id
      FROM brandusers
      WHERE userid = deleteUserId);

  DELETE
    FROM brandusers
  WHERE userid = deleteUserId;
  DELETE
    FROM users
  WHERE Id = deleteUserId;
END
$$

--
-- Definition for procedure GetBrandUserCurrentNotifications
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE GetBrandUserCurrentNotifications (IN inBrandUserId bigint,
IN inTriggeredFrom varchar(255),
IN inCurrentDateTimeUTC datetime)
BEGIN

  SET @sql = CONCAT('SELECT notificationtemplate.`Type`
       , activenotifications.Ordinal
       , notificationtemplate.Text
       , notificationtemplate.BGImageURL BackgroundURL
       , notificationtemplate.CloseImageUrl CloseButtonURL
       , notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl
       , notificationtemplate.CloseDisabledButtonUrl
       , notificationtemplate.ActionButtonImageUrl ActionUrl
       , notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl
       , notificationtemplate.ActionDisabledButtonURL
       , activenotificationtargets.ParametersValue
       , activenotificationtargets.Id ActiveNotificationTargetId
       , group_concat(distinct notificationtriggers.`Trigger`) TriggerTypeCSV
       , group_concat(DISTINCT paymentitems.OrderCode ORDER BY notificationtemplatepaymentitems.ordinal) OrderCodesCSV
  FROM
    notificationtemplate
  JOIN notificationtriggers
  ON notificationtemplate.id = notificationtriggers.notificationtemplateid AND notificationtriggers.`Trigger` IN (', inTriggeredFrom, ')
  JOIN activenotifications
  ON notificationtemplate.id = activenotifications.notificationtemplateid AND
  (
  (isnull(activenotifications.ActiveFrom) AND isnull(activenotifications.ActiveTo)) OR
  (\'', inCurrentDateTimeUTC, '\' >= activenotifications.ActiveFrom AND \'', inCurrentDateTimeUTC, '\' <= activenotifications.ActiveTo) OR
  (\'', inCurrentDateTimeUTC, '\' >= activenotifications.ActiveFrom AND isnull(activenotifications.ActiveTo)) OR
  (isnull(activenotifications.ActiveFrom) AND \'', inCurrentDateTimeUTC, '\' <= activenotifications.ActiveTo)
  )

  JOIN activenotificationtargets
  ON activenotifications.id = activenotificationtargets.activenotificationid
  LEFT JOIN notificationtags
  ON activenotificationtargets.TargetType = 2 AND activenotificationtargets.Id = notificationtags.ActiveNotificationTargetId
  LEFT JOIN brandusertags
  ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = notificationtags.UserTagId AND brandusertags.BUID = ', inBrandUserId, '
  LEFT JOIN users
  ON activenotificationtargets.TargetType = 3 AND users.SocialNetworkUserId = activenotificationtargets.TargetValue
  LEFT JOIN brandusers
  ON
  brandusertags.BUID = brandusers.id OR
  brandusers.UserId = users.Id OR
  (activenotificationtargets.TargetType = 4 AND brandusers.id = activenotificationtargets.TargetValue) OR
  (activenotificationtargets.TargetType = 1)

  LEFT JOIN notificationviews
  ON notificationviews.BUID = ', inBrandUserId, ' AND notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id

  LEFT JOIN notificationtemplatepaymentitems
  ON notificationtemplate.Type IN (4, 5) AND notificationtemplatepaymentitems.NotificationTemplateId = notificationtemplate.Id
  LEFT JOIN paymentitems
  ON notificationtemplate.Type IN (4, 5) AND paymentitems.Id = notificationtemplatepaymentitems.PaymentItemId

  WHERE
    brandusers.id = ', inBrandUserID, '
    AND NOT (notificationtemplate.`Type` = 1
    AND NOT isnull(notificationviews.IsNotificationButtonProcessed)
    AND notificationviews.IsNotificationButtonProcessed = 1)
    and (notificationtemplate.MaxTimesToShow = 0 or (notificationtemplate.MaxTimesToShow > 0 and not exists (select 1 from notificationviews 
                  where notificationviews.BUID = ', inBrandUserID, ' 
                    and notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id 
                    and notificationviews.CountViews >= notificationtemplate.MaxTimesToShow)))
  GROUP BY
    activenotificationtargets.Id
  ORDER BY
    activenotifications.Ordinal ');

  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END
$$

--
-- Definition for procedure GetBrandUserLocalizedNotifications
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE GetBrandUserLocalizedNotifications (IN inBrandUserId bigint,
IN inTriggeredFrom varchar(255),
IN inCurrentDateTimeUTC datetime)
BEGIN

  SET @sql = CONCAT('SELECT notificationtemplate.`Type`
       , activenotifications.Ordinal
       , activenotifications.NotificationTemplateId
       , activenotificationtargets.ParametersValue
       , activenotificationtargets.Id ActiveNotificationTargetId
       , group_concat(distinct notificationtriggers.`Trigger`) TriggerTypeCSV
       , group_concat(DISTINCT paymentitems.OrderCode ORDER BY notificationtemplatepaymentitems.ordinal) OrderCodesCSV
  FROM
    notificationtemplate
  JOIN notificationtriggers
  ON notificationtemplate.id = notificationtriggers.notificationtemplateid AND notificationtriggers.`Trigger` IN (', inTriggeredFrom, ')
  JOIN activenotifications
  ON notificationtemplate.id = activenotifications.notificationtemplateid AND
  (
  (isnull(activenotifications.ActiveFrom) AND isnull(activenotifications.ActiveTo)) OR
  (\'', inCurrentDateTimeUTC, '\' >= activenotifications.ActiveFrom AND \'', inCurrentDateTimeUTC, '\' <= activenotifications.ActiveTo) OR
  (\'', inCurrentDateTimeUTC, '\' >= activenotifications.ActiveFrom AND isnull(activenotifications.ActiveTo)) OR
  (isnull(activenotifications.ActiveFrom) AND \'', inCurrentDateTimeUTC, '\' <= activenotifications.ActiveTo)
  )

  JOIN activenotificationtargets
  ON activenotifications.id = activenotificationtargets.activenotificationid
  LEFT JOIN notificationtags
  ON activenotificationtargets.TargetType = 2 AND activenotificationtargets.Id = notificationtags.ActiveNotificationTargetId
  LEFT JOIN brandusertags
  ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = notificationtags.UserTagId AND brandusertags.BUID = ', inBrandUserId, '
  LEFT JOIN users
  ON activenotificationtargets.TargetType = 3 AND users.SocialNetworkUserId = activenotificationtargets.TargetValue
  LEFT JOIN brandusers
  ON
  brandusertags.BUID = brandusers.id OR
  brandusers.UserId = users.Id OR
  (activenotificationtargets.TargetType = 4 AND brandusers.id = activenotificationtargets.TargetValue) OR
  (activenotificationtargets.TargetType = 1)

  LEFT JOIN notificationviews
  ON notificationviews.BUID = ', inBrandUserId, ' AND notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id

  LEFT JOIN notificationtemplatepaymentitems
  ON notificationtemplate.Type IN (4, 5) AND notificationtemplatepaymentitems.NotificationTemplateId = notificationtemplate.Id
  LEFT JOIN paymentitems
  ON notificationtemplate.Type IN (4, 5) AND paymentitems.Id = notificationtemplatepaymentitems.PaymentItemId

  WHERE
    brandusers.id = ', inBrandUserID, '
    AND NOT (notificationtemplate.`Type` = 1
    AND NOT isnull(notificationviews.IsNotificationButtonProcessed)
    AND notificationviews.IsNotificationButtonProcessed = 1)
    and (notificationtemplate.MaxTimesToShow = 0 or (notificationtemplate.MaxTimesToShow > 0 and not exists (select 1 from notificationviews 
                  where notificationviews.BUID = ', inBrandUserID, ' 
                    and notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id 
                    and notificationviews.CountViews >= notificationtemplate.MaxTimesToShow)))
  GROUP BY
    activenotificationtargets.Id
  ORDER BY
    activenotifications.Ordinal ');

  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

END
$$

--
-- Definition for procedure GetBrandUserNotifications
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE GetBrandUserNotifications (IN inBrandUserId bigint, IN inTriggeredFrom tinyint, IN inCurrentDateTimeUTC datetime)
BEGIN

  -- find all notifications with target = All
  SELECT
    notificationtemplate.Type,
    activenotifications.Ordinal,
    notificationtemplate.Text Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue,
    activenotificationtargets.Id ActiveNotificationTargetId
  FROM notificationtemplate
    JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid AND notificationtriggers.`Trigger` = inTriggeredFrom
    JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      inCurrentDateTimeUTC > IFNULL(activenotifications.ActiveFrom, STR_TO_DATE('01/01/2000', '%d/%m/%Y')) AND
      inCurrentDateTimeUTC < IFNULL(activenotifications.ActiveTo, STR_TO_DATE('01/01/2030', '%d/%m/%Y'))
    JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid AND
      activenotificationtargets.TargetType = 1
    LEFT JOIN notificationviews
      ON notificationviews.BUID = inBrandUserId AND ActiveNotificationTargetId = activenotificationtargets.Id AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow

  -- find all notifications with target = tag
  UNION ALL
  SELECT
    notificationtemplate.Type,
    activenotifications.Ordinal,
    notificationtemplate.Text Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue
  FROM notificationtemplate
    JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid
    JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      inCurrentDateTimeUTC > IFNULL(activenotifications.ActiveFrom, STR_TO_DATE('01/01/2000', '%d/%m/%Y')) AND
      inCurrentDateTimeUTC < IFNULL(activenotifications.ActiveTo, STR_TO_DATE('01/01/2030', '%d/%m/%Y'))
    JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid
    JOIN brandusertags
      ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = activenotificationtargets.TargetValue
    JOIN brandusers
      ON brandusertags.BUID = brandusers.id AND brandusers.id = inBrandUserId
    LEFT JOIN notificationviews
      ON notificationviews.BUID = brandusers.ID AND ActiveNotificationTargetId = activenotificationtargets.Id AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow

  -- find all notifications with target = BUID
  UNION ALL
  SELECT
    notificationtemplate.Type,
    activenotifications.Ordinal,
    notificationtemplate.Text Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue
  FROM notificationtemplate
    JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid
    JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      inCurrentDateTimeUTC > IFNULL(activenotifications.ActiveFrom, STR_TO_DATE('01/01/2000', '%d/%m/%Y')) AND
      inCurrentDateTimeUTC < IFNULL(activenotifications.ActiveTo, STR_TO_DATE('01/01/2030', '%d/%m/%Y'))
    JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid
    JOIN users
      ON activenotificationtargets.TargetType = 3 AND users.SocialNetworkUserId = activenotificationtargets.TargetValue
    JOIN brandusers
      ON brandusers.UserId = users.Id AND brandusers.id = inBrandUserId
    LEFT JOIN notificationviews
      ON notificationviews.BUID = brandusers.ID AND ActiveNotificationTargetId = activenotificationtargets.Id AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow

  -- find all notifications with target = Social Network Id
  UNION ALL
  SELECT
    notificationtemplate.Type,
    activenotifications.Ordinal,
    notificationtemplate.Text Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue
  FROM notificationtemplate
    JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid
    JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      inCurrentDateTimeUTC > IFNULL(activenotifications.ActiveFrom, STR_TO_DATE('01/01/2000', '%d/%m/%Y')) AND
      inCurrentDateTimeUTC < IFNULL(activenotifications.ActiveTo, STR_TO_DATE('01/01/2030', '%d/%m/%Y'))
    LEFT JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid
    LEFT JOIN brandusers
      ON activenotificationtargets.TargetType = 4 AND brandusers.id = activenotificationtargets.TargetValue AND
      brandusers.id = inBrandUserId
    LEFT JOIN notificationviews
      ON notificationviews.BUID = brandusers.ID AND ActiveNotificationTargetId = activenotificationtargets.Id AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow;
END
$$

--
-- Definition for procedure GetBrandUserNotificationsTable
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE GetBrandUserNotificationsTable (IN inBrandUserId bigint, IN inTriggeredFrom tinyint, IN inCurrentDateTimeUTC datetime)
BEGIN
  SELECT
    notificationtemplate.`Type`,
    activenotifications.Ordinal,
    notificationtemplate.Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue,
    activenotificationtargets.Id ActiveNotificationTargetId
  -- , notificationviews.IsNotificationButtonProcessed
  -- , notificationviews.CountViews
  FROM notificationtemplate
    JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid AND notificationtriggers.`Trigger` = inTriggeredFrom
    JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      (
      (ISNULL(activenotifications.ActiveFrom) AND ISNULL(activenotifications.ActiveTo)) OR
      (inCurrentDateTimeUTC >= activenotifications.ActiveFrom AND inCurrentDateTimeUTC <= activenotifications.ActiveTo) OR
      (inCurrentDateTimeUTC >= activenotifications.ActiveFrom AND ISNULL(activenotifications.ActiveTo)) OR
      (ISNULL(activenotifications.ActiveFrom) AND inCurrentDateTimeUTC <= activenotifications.ActiveTo)
      )

    JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid
    LEFT JOIN notificationtags
      ON activenotificationtargets.TargetType = 2 AND activenotificationtargets.Id = notificationtags.ActiveNotificationTargetId
    LEFT JOIN brandusertags
      ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = notificationtags.UserTagId AND brandusertags.BUID = inBrandUserId
    LEFT JOIN users
      ON activenotificationtargets.TargetType = 3 AND users.SocialNetworkUserId = activenotificationtargets.TargetValue
    LEFT JOIN brandusers
      ON brandusertags.BUID = brandusers.id OR
      brandusers.UserId = users.Id OR
      (activenotificationtargets.TargetType = 4 AND brandusers.id = activenotificationtargets.TargetValue) OR
      (activenotificationtargets.TargetType = 1)

    LEFT JOIN notificationviews
      ON notificationviews.BUID = inBrandUserId AND notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id
      AND (notificationtemplate.MaxTimesToShow = 0 OR (notificationtemplate.MaxTimesToShow > 0 AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow))

  WHERE brandusers.id = inBrandUserID
  AND NOT (notificationtemplate.`Type` = 1
  AND NOT ISNULL(notificationviews.IsNotificationButtonProcessed)
  AND notificationviews.IsNotificationButtonProcessed = 1)
  ORDER BY activenotifications.Ordinal;

END
$$

--
-- Definition for procedure GetBrandUserNotifications_old
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE GetBrandUserNotifications_old (IN inBrandUserId bigint, IN inTriggeredFrom tinyint, IN inCurrentDateTimeUTC datetime)
BEGIN
  SELECT DISTINCT
    notificationtemplate.Type,
    activenotifications.Ordinal,
    notificationtemplate.Text Text,
    notificationtemplate.BGImageURL BackgroundURL,
    notificationtemplate.CloseImageUrl CloseButtonURL,
    notificationtemplate.CloseMouseOverImageUrl CloseOverButtonUrl,
    notificationtemplate.ActionButtonImageUrl ActionUrl,
    notificationtemplate.ActionButtonMouseOverUrl ActionOverUrl,
    activenotificationtargets.ParametersValue,
    activenotificationtargets.Id ActiveNotificationTargetId
  FROM notificationtemplate
    LEFT JOIN notificationtriggers
      ON notificationtemplate.id = notificationtriggers.notificationtemplateid AND notificationtriggers.`Trigger` = inTriggeredFrom
    LEFT JOIN activenotifications
      ON notificationtemplate.id = activenotifications.notificationtemplateid AND
      (
      (ISNULL(activenotifications.ActiveFrom) AND ISNULL(activenotifications.ActiveTo)) OR
      (inCurrentDateTimeUTC >= activenotifications.ActiveFrom AND inCurrentDateTimeUTC <= activenotifications.ActiveTo) OR
      (inCurrentDateTimeUTC >= activenotifications.ActiveFrom AND ISNULL(activenotifications.ActiveTo)) OR
      (ISNULL(activenotifications.ActiveFrom) AND inCurrentDateTimeUTC <= activenotifications.ActiveTo)
      )

    LEFT JOIN activenotificationtargets
      ON activenotifications.id = activenotificationtargets.activenotificationid
    LEFT JOIN notificationtags
      ON activenotificationtargets.TargetType = 2 AND activenotificationtargets.Id = notificationtags.ActiveNotificationTargetId
    LEFT JOIN brandusertags
      ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = notificationtags.UserTagId AND brandusertags.BUID = inBrandUserId
    LEFT JOIN users
      ON activenotificationtargets.TargetType = 3 AND users.SocialNetworkUserId = activenotificationtargets.TargetValue
    LEFT JOIN brandusers
      ON brandusertags.BUID = brandusers.id OR
      brandusers.UserId = users.Id OR
      (activenotificationtargets.TargetType = 4 AND brandusers.id = activenotificationtargets.TargetValue) OR
      (activenotificationtargets.TargetType = 1)

    LEFT JOIN notificationviews
      ON notificationviews.BUID = inBrandUserId AND notificationviews.ActiveNotificationTargetId = activenotificationtargets.Id AND notificationviews.CountViews < notificationtemplate.MaxTimesToShow
  WHERE brandusers.id = inBrandUserID;

END
$$

--
-- Definition for procedure PrepareNotificationsQueue
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE PrepareNotificationsQueue (IN inActiveNotificationId int,
IN inConsiderNotificationAsAbandonedAfterMinutes int,
IN inCurrentDateTimeUTC datetime,
IN inBrandId bigint)
BEGIN

  DECLARE Error_State CONDITION FOR SQLSTATE '99001';
  DECLARE isNotificationForAll bool DEFAULT FALSE;
  DECLARE countTotalTargets int DEFAULT 0;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    SELECT
      1 AS RESULT;
    ROLLBACK;
  END;

  START TRANSACTION;

    SELECT
      COUNT(Id) > 0 INTO isNotificationForAll
    FROM activenotificationtargets
    WHERE Id = inActiveNotificationId
    AND TargetType = 1;

    # validate that the active notification has a single target if it has any target of type All (1)
    IF (isNotificationForAll) THEN
      SELECT
        COUNT(Id) INTO countTotalTargets
      FROM activenotificationtargets
      WHERE Id = inActiveNotificationId;

      IF (countTotalTargets > 1) THEN
        SIGNAL Error_State SET MESSAGE_TEXT = 'Active notification with one TargetType=1 (All) must have exactly 1 row in ActiveTargets';
      END IF;
    END IF;

    # get data when the target is All
    IF (isNotificationForAll) THEN
      #CREATE TEMPORARY TABLE tmp ENGINE = MEMORY
      INSERT INTO notificationsqueue (SocialNetworkUserId, BUID, Text, ParametersValue, ActiveNotificationId)
        SELECT
          users_All.SocialNetworkUserId,
          brandusers_All.id AS BUID,
          notificationtemplate.SocialNotificationText,
          activenotificationtargets.ParametersValue,
          inActiveNotificationId
        FROM notificationtemplate
          JOIN activenotifications
            ON notificationtemplate.BrandId = inBrandId AND
            activenotifications.id = inActiveNotificationId AND
            notificationtemplate.id = activenotifications.notificationtemplateid
          JOIN activenotificationtargets
            ON activenotifications.id = activenotificationtargets.activenotificationid
          JOIN brandusers AS brandusers_All
            ON brandusers_All.BrandId = inBrandId
          JOIN users AS users_All
            ON brandusers_All.UserId = users_All.Id
          JOIN branduserstate
            ON branduserstate.Id = brandusers_All.id
        WHERE ISNULL(activenotifications.SocialNotificationLastSentTS)
        AND branduserstate.LastLoginTS >= UTC_TIMESTAMP() - INTERVAL 28 DAY
        AND brandusers_All.IsAppRemoved = 0;
    ELSE

      # get data when target is not All

      #CREATE TEMPORARY TABLE tmp ENGINE = MEMORY
      INSERT INTO notificationsqueue (SocialNetworkUserId, BUID, Text, ParametersValue, ActiveNotificationId)
        SELECT
            CASE activenotificationtargets.TargetType
              WHEN 4 THEN users_BUID.SocialNetworkUserId
              WHEN 3 THEN users_Social.SocialNetworkUserId
              WHEN 2 THEN users_Tags.SocialNetworkUserId
            END AS SocialNetworkUserId,
            CASE activenotificationtargets.TargetType
              WHEN 4 THEN brandusers_BUID.id
              WHEN 3 THEN brandusers_SocialId.id
              WHEN 2 THEN brandusertags.BUID
            END AS BUID,
            notificationtemplate.SocialNotificationText,
            activenotificationtargets.ParametersValue,
            inActiveNotificationId
        FROM notificationtemplate
          JOIN activenotifications
            ON notificationtemplate.BrandId = inBrandId AND
            activenotifications.id = inActiveNotificationId AND
            notificationtemplate.id = activenotifications.notificationtemplateid
          JOIN activenotificationtargets
            ON activenotifications.id = activenotificationtargets.activenotificationid

          LEFT JOIN notificationtags
            ON activenotificationtargets.TargetType = 2 AND activenotificationtargets.Id = notificationtags.ActiveNotificationTargetId
          LEFT JOIN brandusertags
            ON activenotificationtargets.TargetType = 2 AND brandusertags.TagId = notificationtags.UserTagId

          LEFT JOIN brandusers AS brandusers_Tags
            ON activenotificationtargets.TargetType = 2 AND brandusers_Tags.BrandId = inBrandId AND brandusertags.BUID = brandusers_Tags.id
          LEFT JOIN users AS users_Tags
            ON activenotificationtargets.TargetType = 2 AND users_Tags.Id = brandusers_Tags.UserId

          LEFT JOIN users AS users_Social
            ON activenotificationtargets.TargetType = 3 AND users_Social.SocialNetworkUserId = activenotificationtargets.TargetValue
          LEFT JOIN brandusers AS brandusers_SocialId
            ON activenotificationtargets.TargetType = 3 AND brandusers_SocialId.BrandId = inBrandId AND brandusers_SocialId.UserId = users_Social.Id

          LEFT JOIN brandusers AS brandusers_BUID
            ON activenotificationtargets.TargetType = 4 AND brandusers_BUID.BrandId = inBrandId AND brandusers_BUID.id = activenotificationtargets.TargetValue
          LEFT JOIN users AS users_BUID
            ON activenotificationtargets.TargetType = 4 AND users_BUID.Id = brandusers_BUID.UserId

          LEFT JOIN branduserstate
            ON (branduserstate.Id = brandusers_Tags.id AND branduserstate.LastLoginTS >= UTC_TIMESTAMP() - INTERVAL 28 DAY) -- or branduserstate.Id = brandusers_BUID.id OR branduserstate.Id = brandusers_SocialId.id)

        WHERE ISNULL(activenotifications.SocialNotificationLastSentTS);

    END IF;

  COMMIT;

  SELECT
    0 AS RESULT;
END
$$

--
-- Definition for procedure UpdateLeaderBoardHallOfFame
--
CREATE DEFINER = 'xproot'@'%'
PROCEDURE UpdateLeaderBoardHallOfFame ()
BEGIN
  SELECT
    u.SocialNetworkId,
    u.SocialNetworkUserId,
    u.FirstName,
    st.CalculatedCurrentLevel,
    st.CurrentXP
  FROM branduserstate st,
       users u,
       brandusers b
  WHERE b.BrandId = 3
  AND
  u.Id = b.UserId
  AND
  b.id = st.Id
  ORDER BY st.CurrentXP DESC
  LIMIT
  100;
END
$$

--
-- Definition for procedure UpdatePartitions
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE UpdatePartitions (dbname text, tblname text, today_date date, days_past int, days_future int,
dayToStartWith int, interval_info varchar(100), table_date_coulmn varchar(100),
table_date_column_type varchar(100))
ThisSP:
BEGIN

  DECLARE l_cutoff_date bigint(20);
  DECLARE maxpart_date_temp bigint(20);
  DECLARE maxpart_date date;
  DECLARE partition_count,
          max_data_count int;
  DECLARE minpart date;
  DECLARE droppart_sql date;
  DECLARE newpart_date,
          lowpart_date date;
  DECLARE newpart_sql varchar(500);
  DECLARE l_old_partitions varchar(4500);
  DECLARE l_date_column_function varchar(30);
  DECLARE l_no_part_value varchar(300);
  DECLARE new_part_date_final varchar(300);



  IF (interval_info = 'WEEK') THEN
    IF (dayToStartWith < 1 OR dayToStartWith > 7) THEN
      SELECT
        'If interval parameter is "WEEK", then the day paraemter needs to be 1-7';
      LEAVE ThisSP;
    END IF;
  END IF;


  IF (interval_info = 'MONTH') THEN
    IF (dayToStartWith < 1 OR dayToStartWith > 31) THEN
      SELECT
        'If interval parameter is "MONTH", then the day paraemter needs to be 1-31';
      LEAVE ThisSP;
    END IF;
  END IF;


  SELECT
    PARTITION_DESCRIPTION INTO maxpart_date_temp
  FROM INFORMATION_SCHEMA.PARTITIONS
  WHERE TABLE_NAME = tblname
  AND TABLE_SCHEMA = dbname
  AND PARTITION_ORDINAL_POSITION = (SELECT
      MAX(PARTITION_ORDINAL_POSITION)
    FROM INFORMATION_SCHEMA.PARTITIONS
    WHERE TABLE_NAME = tblname
    AND TABLE_SCHEMA = dbname
    AND PARTITION_DESCRIPTION <> 'MAXVALUE');


  IF (table_date_column_type = 'DATETIME') THEN
    SELECT
      FROM_DAYS(maxpart_date_temp) INTO maxpart_date;
    SELECT
      'TO_DAYS' INTO l_date_column_function;
    SELECT
      TO_DAYS(NOW() - INTERVAL 10 DAY) INTO l_no_part_value;

  ELSEIF (table_date_column_type = 'TIMESTAMP') THEN
    SELECT
      FROM_UNIXTIME(maxpart_date_temp) INTO maxpart_date;
    SELECT
      'UNIX_TIMESTAMP' INTO l_date_column_function;
    SELECT
      CONCAT('UNIX_TIMESTAMP(''', CAST(DATE_FORMAT(CAST(((NOW() - INTERVAL 11 DAY)) AS char(12)), '%Y-%m-%d') AS char(12)), ' 00:00:00'')') INTO l_no_part_value;
  END IF;


  IF (IFNULL(maxpart_date, - 1111) = - 1111) THEN

    SET @sql := CONCAT('ALTER TABLE '
    , dbname, '.', tblname
    , ' PARTITION BY RANGE ( ', l_date_column_function, '( '
    , table_date_coulmn
    , ' )) (PARTITION p'
    , CAST(DATE_FORMAT(CAST(((NOW() - INTERVAL 11 DAY)) AS char(12)), '%Y%m%d') AS char(12)),
    ' VALUES LESS THAN (', l_no_part_value, ') ENGINE = INNODB)'
    );
    SELECT
      @sql;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;



    SELECT
      PARTITION_DESCRIPTION INTO maxpart_date_temp
    FROM INFORMATION_SCHEMA.PARTITIONS
    WHERE TABLE_NAME = tblname
    AND TABLE_SCHEMA = dbname
    AND PARTITION_ORDINAL_POSITION = (SELECT
        MAX(PARTITION_ORDINAL_POSITION)
      FROM INFORMATION_SCHEMA.PARTITIONS
      WHERE TABLE_NAME = tblname
      AND TABLE_SCHEMA = dbname
      AND PARTITION_DESCRIPTION <> 'MAXVALUE');


    IF (table_date_column_type = 'DATETIME') THEN
      SELECT
        FROM_DAYS(maxpart_date_temp) INTO maxpart_date;

    ELSEIF (table_date_column_type = 'TIMESTAMP') THEN
      SELECT
        FROM_UNIXTIME(maxpart_date_temp) INTO maxpart_date;
    END IF;

  END IF;




  SET @c1 = 100;
  SET @sql := CONCAT('select count(*) into @c1 from ', dbname, '.', tblname, ' where ', table_date_coulmn, ' >= ''', maxpart_date, '''');
  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;
  SET max_data_count := @c1;


  IF (IFNULL(max_data_count, 0) > 0) THEN
    SELECT
      'The PMAX partition has data in it, leaving SP, please: 1. stop system. 2. move data in pmax for a temp table. 3.drop the pmax partition. 4.rerun the script. 5.load data back from tmp table.';
    LEAVE ThisSP;
  ELSE


    SELECT
      COUNT(*) INTO max_data_count
    FROM INFORMATION_SCHEMA.PARTITIONS
    WHERE TABLE_NAME = tblname
    AND TABLE_SCHEMA = dbname
    AND PARTITION_DESCRIPTION = 'MAXVALUE';

    IF (max_data_count > 0) THEN
      SET @sql := CONCAT('alter table ', dbname, '.', tblname, ' drop partition PMAX ');
    END IF;

    SELECT
      @sql;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

  END IF;




  WHILE (maxpart_date < today_date + INTERVAL days_future DAY)
    DO


    IF (interval_info = 'WEEK') THEN
      SET maxpart_date := maxpart_date + INTERVAL 1 DAY;
      WHILE (DAYOFWEEK(maxpart_date) <> dayToStartWith) DO
        SET maxpart_date := maxpart_date + INTERVAL 1 DAY;
      END WHILE;
      SET newpart_date := maxpart_date + INTERVAL 1 WEEK;
    ELSEIF (interval_info = 'DAY') THEN
      SET newpart_date := maxpart_date + INTERVAL dayToStartWith DAY;
    ELSEIF (interval_info = '45DAYS') THEN
      SET newpart_date := maxpart_date + INTERVAL 45 DAY;
    ELSEIF (interval_info = 'MONTH') THEN
      SET maxpart_date := maxpart_date + INTERVAL 1 DAY;
      WHILE (DAYOFMONTH(maxpart_date) <> dayToStartWith) DO
        SET maxpart_date := maxpart_date + INTERVAL 1 DAY;
      END WHILE;
      SET newpart_date := maxpart_date + INTERVAL 1 MONTH;
    END IF;
    SET lowpart_date := maxpart_date;


    IF (table_date_column_type = 'DATETIME') THEN
      SELECT
        TO_DAYS(newpart_date) INTO new_part_date_final;
    ELSEIF (table_date_column_type = 'TIMESTAMP') THEN
      SELECT
        CONCAT('UNIX_TIMESTAMP(''', CAST(DATE_FORMAT(CAST(newpart_date AS char(12)), '%Y-%m-%d') AS char(12)), ' 00:00:00'')') INTO new_part_date_final;
    END IF;


    SET @sql := CONCAT('ALTER TABLE '
    , dbname, '.', tblname
    , ' ADD PARTITION (PARTITION '
    , 'p', CAST(DATE_FORMAT(CAST(((lowpart_date)) AS char(12)), '%Y%m%d') AS char(12))
    , ' VALUES LESS THAN ('
    , new_part_date_final
    , '));');

    SELECT
      @sql;
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    SET maxpart_date := newpart_date;

  END WHILE;


  SET @sql := CONCAT('alter table ', dbname, '.', tblname, ' ADD partition (partition PMAX VALUES LESS THAN MAXVALUE )');

  SELECT
    @sql;

  PREPARE stmt FROM @sql;
  EXECUTE stmt;
  DEALLOCATE PREPARE stmt;

  SELECT
    TO_DAYS(DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL days_past DAY), '%Y%m%d')) INTO l_cutoff_date;

  SELECT
    GROUP_CONCAT(partition_name) INTO l_old_partitions
  FROM information_schema.partitions
  WHERE PARTITION_DESCRIPTION < l_cutoff_date
  AND partition_name <> 'PMAX'
  AND table_name = tblname
  AND TABLE_SCHEMA = dbname;

  IF (l_old_partitions IS NOT NULL) THEN

    SET @sql = CONCAT('ALTER TABLE ', dbname, '.', tblname, ' DROP PARTITION ', l_old_partitions);
    SELECT
      @sql;

    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;


  END IF;


END
$$

DELIMITER ;

--
-- Definition for view DailyUserReport
--
CREATE OR REPLACE
DEFINER = 'xproot'@'%'
VIEW DailyUserReport
AS
SELECT
  CAST(`BrandUserDailyActivity`.`ActivityDate` AS date) AS `ActDate`,
  `BrandUserDailyActivity`.`BUID` AS `BUID`,
  CAST(`brandusers`.`RegistrationTS` AS date) AS `RegDate`,
  IF((`brandusers`.`SocialNetworkReferrer` IS NOT NULL), `brandusers`.`SocialNetworkReferrer`, IF(ISNULL(`brandusers`.`ReferrerUrl`), 'NA', IF((LEFT(`brandusers`.`ReferrerUrl`, 3) = 'CID'), SUBSTR(`brandusers`.`ReferrerUrl`, 5, 9), `brandusers`.`ReferrerUrl`))) AS `Campaign`,
  `BrandUserDailyActivity`.`Logins` AS `Logins`,
  `BrandUserDailyActivity`.`Spins` AS `Spins`,
  `BrandUserDailyActivity`.`TotalBets` AS `TotalBets`,
  `BrandUserDailyActivity`.`Deposits` AS `Deposits`,
  `BrandUserDailyActivity`.`DepositsSum` AS `DepositsSum`,
  `BrandUserDailyActivity`.`FirstDepositDate` AS `FirstDepositDate`,
  `brandusers`.`ReferrerUrl` AS `ReferrerURL`,
  `brandusers`.`SocialNetworkReferrer` AS `SocialNetworkReferrer`,
  IF((CAST(`BrandUserDailyActivity`.`ActivityDate` AS date) = CAST(`brandusers`.`RegistrationTS` AS date)), 1, 0) AS `RegDay`,
  (TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) AS `DaysFromReg`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) = 0), `BrandUserDailyActivity`.`Spins`, 0) AS `1D_Spins`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) = 0), `BrandUserDailyActivity`.`TotalBets`, 0) AS `1D_Bets`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) = 0), `BrandUserDailyActivity`.`Deposits`, 0) AS `1D_Deps`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) = 0), `BrandUserDailyActivity`.`DepositsSum`, 0) AS `1D_DepSum`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) = 0), `BrandUserDailyActivity`.`FirstDepositDate`, 0) AS `1D_FTDs`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) < 8), `BrandUserDailyActivity`.`Spins`, 0) AS `7D_Spins`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) < 8), `BrandUserDailyActivity`.`TotalBets`, 0) AS `7D_Bets`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) < 8), `BrandUserDailyActivity`.`Deposits`, 0) AS `7D_Deps`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) < 8), `BrandUserDailyActivity`.`DepositsSum`, 0) AS `7D_DepSum`,
  IF(((TO_DAYS(CAST(`BrandUserDailyActivity`.`ActivityDate` AS date)) - TO_DAYS(CAST(`brandusers`.`RegistrationTS` AS date))) < 8), `BrandUserDailyActivity`.`FirstDepositDate`, 0) AS `7D_FTDs`
FROM (`BrandUserDailyActivity`
  JOIN `brandusers`
    ON ((`brandusers`.`id` = `BrandUserDailyActivity`.`BUID`)))
ORDER BY CAST(`BrandUserDailyActivity`.`ActivityDate` AS date) DESC;

--
-- Definition for view GiftsReport
--
CREATE OR REPLACE
DEFINER = 'xproot'@'%'
VIEW GiftsReport
AS
SELECT
  `ag`.`SenderId` AS `SenderId`,
  CONCAT(`u`.`FirstName`, ' ', `u`.`LastName`) AS `Name`,
  `ag`.`ReceiverId` AS `ReceiverId`,
  `ag`.`ReceiverSocialNetworkId` AS `ReceiverSocialNetworkId`,
  `ag`.`GiftValues` AS `GiftValues`,
  CAST(`ag`.`SentTS` AS date) AS `SendDate`,
  '0' AS `IsCollected`,
  NULL AS `DateCollected`
FROM ((`xpinatordb`.`activegifts` `ag`
  JOIN `xpinatordb`.`brandusers` `bu`
    ON ((`ag`.`SenderId` = `bu`.`id`)))
  JOIN `xpinatordb`.`users` `u`
    ON ((`bu`.`UserId` = `u`.`Id`)))
UNION
SELECT
  `gh`.`SenderId` AS `SenderId`,
  CONCAT(`u`.`FirstName`, ' ', `u`.`LastName`) AS `Name`,
  `gh`.`ReceiverId` AS `ReceiverId`,
  `ur`.`SocialNetworkUserId` AS `SocialNetworkUserId`,
  `gh`.`GiftValues` AS `GiftValues`,
  CAST(`gh`.`SentTS` AS date) AS `SendDate`,
  '1' AS `IsCollected`,
  CAST(`gh`.`CollectedTS` AS date) AS `DateCollected`
FROM ((((`xpinatordb_history`.`giftshistory` `gh`
  JOIN `xpinatordb`.`brandusers` `bu`
    ON ((`gh`.`SenderId` = `bu`.`id`)))
  JOIN `xpinatordb`.`users` `u`
    ON ((`bu`.`UserId` = `u`.`Id`)))
  JOIN `xpinatordb`.`brandusers` `bur`
    ON ((`gh`.`ReceiverId` = `bur`.`id`)))
  JOIN `xpinatordb`.`users` `ur`
    ON ((`bur`.`UserId` = `ur`.`Id`)))
ORDER BY `SendDate` DESC;

--
-- Definition for view KPIReport_BU_Data
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW KPIReport_BU_Data
AS
SELECT
  DATE_FORMAT(`bu`.`RegistrationTS`, '%Y-%m-%d') AS `date`,
  COUNT(1) AS `countregistrations`
FROM `brandusers` `bu`
GROUP BY DATE_FORMAT(`bu`.`RegistrationTS`, '%Y-%m-%d');

--
-- Definition for view KPIReport_PT_Data
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW KPIReport_PT_Data
AS
SELECT
  DATE_FORMAT(`bu`.`CreatedTS`, '%Y-%m-%d') AS `date`,
  COUNT(1) AS `counttransactions`,
  SUM(`bu`.`Price`) AS `sumtransactions`
FROM `paymenttransactions` `bu`
GROUP BY DATE_FORMAT(`bu`.`CreatedTS`, '%Y-%m-%d');

--
-- Definition for view PaymentsReport
--
CREATE OR REPLACE
DEFINER = 'xproot'@'%'
VIEW PaymentsReport
AS
SELECT
  `pt`.`Id` AS `Transaction Id`,
  `pt`.`BUID` AS `BUID`,
  CONCAT(`u`.`FirstName`, ' ', `u`.`LastName`) AS `Name`,
  ROUND((`pt`.`Price` / 10), 0) AS `Price`,
  `pt`.`CoinsValue` AS `Coinsvalue`,
  `pt`.`Status` AS `Status`,
  `pt`.`CreatedTS` AS `DateCreated`,
  `pt`.`UpdatedTS` AS `DateUTCConfirmed`
FROM ((`paymenttransactions` `pt`
  JOIN `brandusers` `bu`
    ON ((`pt`.`BUID` = `bu`.`id`)))
  JOIN `users` `u`
    ON ((`u`.`Id` = `bu`.`UserId`)))
WHERE (`pt`.`Status` = 2);

--
-- Definition for view UsersReport
--
CREATE OR REPLACE
DEFINER = 'xproot'@'%'
VIEW UsersReport
AS
SELECT
  `bu`.`id` AS `BUID`,
  `bu`.`BrandId` AS `BrandId`,
  `u`.`SocialNetworkUserId` AS `SocialNetworkId`,
  CONCAT(`u`.`FirstName`, ' ', `u`.`LastName`) AS `Name`,
  `bu`.`Email` AS `Email`,
  `bus`.`CalculatedCurrentLevel` AS `CurrentLevel`,
  `bus`.`CurrentXP` AS `CurrentXP`,
  `bus`.`CurrentBalance` AS `CurrentBalance`,
  `bu`.`IsLike` AS `IsLike`,
  `bu`.`IsDepositor` AS `IsDepositor`,
  `bus`.`LastLoginTS` AS `LastLoginDate`,
  CAST(`bu`.`RegistrationTS` AS date) AS `RegistrationDate`,
  `bu`.`LevelConfigSetId` AS `LevelSetId`,
  `bu`.`QueryString` AS `RegistreationQueryString`
FROM ((`brandusers` `bu`
  LEFT JOIN `users` `u`
    ON ((`bu`.`UserId` = `u`.`Id`)))
  LEFT JOIN `branduserstate` `bus`
    ON ((`bu`.`id` = `bus`.`Id`)));

--
-- Definition for view KPIReport
--
CREATE OR REPLACE
DEFINER = 'root'@'localhost'
VIEW KPIReport
AS
SELECT
  (STR_TO_DATE('14-10-2012', '%d-%m-%Y') + INTERVAL `days_dummy`.`num` DAY) AS `date`,
  IFNULL(`bu`.`countregistrations`, 0) AS `New Registrations`,
  IFNULL(`pt`.`counttransactions`, 0) AS `Count Transactions`,
  (IFNULL(ROUND(`pt`.`sumtransactions`, 0), 0) / 10) AS `Transactions Total Sum`
FROM ((`days_dummy`
  LEFT JOIN `KPIReport_BU_Data` `bu`
    ON (((STR_TO_DATE('14-10-2012', '%d-%m-%Y') + INTERVAL `days_dummy`.`num` DAY) = `bu`.`date`)))
  LEFT JOIN `KPIReport_PT_Data` `pt`
    ON (((STR_TO_DATE('14-10-2012', '%d-%m-%Y') + INTERVAL `days_dummy`.`num` DAY) = `pt`.`date`)))
WHERE (`days_dummy`.`num` <= (TO_DAYS(NOW()) - TO_DAYS(STR_TO_DATE('14-10-2012', '%d-%m-%Y'))));