<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.milkmangames.nativeextensions.ios"><apiName>com.milkmangames.nativeextensions.ios</apiName><apiDetail/><apiClassifier id="com.milkmangames.nativeextensions.ios:StoreKitProduct"><apiName>StoreKitProduct</apiName><shortdesc> StoreKitProduct </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> StoreKitProduct </apiDesc></apiClassifierDetail><apiConstructor id="com.milkmangames.nativeextensions.ios:StoreKitProduct:StoreKitProduct"><apiName>StoreKitProduct</apiName><shortdesc> Create New Store Kit Product.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Create New Store Kit Product.  Do not call this directly; StoreKitProduct instances will be created and stored inside
	 the validProducts property of a StoreKitEvent after calling StoreKit.storeKit.loadProductDetails().
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKitProduct:com.milkmangames.nativeextensions.ios:fromXML"><apiName>fromXML</apiName><shortdesc> From XML </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.milkmangames.nativeextensions.ios:StoreKitProduct</apiOperationClassifier></apiReturn><apiParam><apiItemName>xml</apiItemName><apiType value="XML"/></apiParam></apiOperationDef><apiDesc> From XML </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKitProduct:toString"><apiName>toString</apiName><shortdesc> Return string representation of this StoreKitProductc </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc> Return string representation of this StoreKitProductc </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:description"><apiName>description</apiName><shortdesc> The Localized Description of this product </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The Localized Description of this product </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:localeId"><apiName>localeId</apiName><shortdesc> An ID string indicating the current locale for the price </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> An ID string indicating the current locale for the price </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:localizedPrice"><apiName>localizedPrice</apiName><shortdesc> The localized price string for this product- what you can display to the user.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The localized price string for this product- what you can display to the user.  For instance, it may read '$0.99' in the USA </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:price"><apiName>price</apiName><shortdesc> A string of the price value (ex, 0.99) </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> A string of the price value (ex, 0.99) </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:productId"><apiName>productId</apiName><shortdesc> The product ID of this product </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The product ID of this product </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKitProduct:title"><apiName>title</apiName><shortdesc> The Localized Title of this product </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The Localized Title of this product </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions.ios:StoreKit"><apiName>StoreKit</apiName><shortdesc> IOS StoreKit Extension </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> IOS StoreKit Extension </apiDesc></apiClassifierDetail><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skReceiptRefreshFailed"><apiName>skReceiptRefreshFailed</apiName><shortdesc> Dispatched when the app-level receipt has failed to be refreshed, either indirectly or from a call to refreshAppReceipt()
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the app-level receipt has failed to be refreshed, either indirectly or from a call to refreshAppReceipt()
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skReceiptRefreshed"><apiName>skReceiptRefreshed</apiName><shortdesc> Dispatched when the app-level receipt has been refreshed, either indirectly or from a call to refreshAppReceipt()
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the app-level receipt has been refreshed, either indirectly or from a call to refreshAppReceipt()
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skProductViewLoaded"><apiName>skProductViewLoaded</apiName><shortdesc> Dispatched when an in-app product view for iTunes Content displayed via StoreKit.storeKit.displayProductView() has loaded its inner content
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an in-app product view for iTunes Content displayed via StoreKit.storeKit.displayProductView() has loaded its inner content
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skProductViewFailed"><apiName>skProductViewFailed</apiName><shortdesc> Dispatched when an in-app product view for iTunes Content requested via StoreKit.storeKit.displayProductView() has failed to load 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an in-app product view for iTunes Content requested via StoreKit.storeKit.displayProductView() has failed to load 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skDownloadFailed"><apiName>skDownloadFailed</apiName><shortdesc> Dispatched when a download has failed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a download has failed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skProductViewDismissed"><apiName>skProductViewDismissed</apiName><shortdesc> Dispatched when an in-app product view for iTunes Content displayed via StoreKit.storeKit.displayProductView() has been dismissed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an in-app product view for iTunes Content displayed via StoreKit.storeKit.displayProductView() has been dismissed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skProductViewDisplayed"><apiName>skProductViewDisplayed</apiName><shortdesc> Dispatched when an in-app product view for iTunes Content has been displayed via StoreKit.storeKit.displayProductView()
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an in-app product view for iTunes Content has been displayed via StoreKit.storeKit.displayProductView()
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skDownloadFinished"><apiName>skDownloadFinished</apiName><shortdesc> Dispatched when a download has finished successfully 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a download has finished successfully 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skDownloadUpdated"><apiName>skDownloadUpdated</apiName><shortdesc> Dispatched when a download has been updated
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a download has been updated
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skTransactionsRestored"><apiName>skTransactionsRestored</apiName><shortdesc> Dispatched when a restore of purchases has completed
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a restore of purchases has completed
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skPurchaseDeferred"><apiName>skPurchaseDeferred</apiName><shortdesc> Dispatched when a purchase is on old waiting for parental permission or otherwise
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a purchase is on old waiting for parental permission or otherwise
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skPurchaseCancelled"><apiName>skPurchaseCancelled</apiName><shortdesc> Dispatched when a purchase has been cancelled 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a purchase has been cancelled 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skPurchaseSucceeded"><apiName>skPurchaseSucceeded</apiName><shortdesc> Dispatched when an item has been successfully purchased, or a purchased item is restored
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an item has been successfully purchased, or a purchased item is restored
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skPurchaseFailed"><apiName>skPurchaseFailed</apiName><shortdesc> Dispatched when a purchase attempt fails
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a purchase attempt fails
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skTransactionRestoreFailed"><apiName>skTransactionRestoreFailed</apiName><shortdesc> Dispatched When a Purchases Restore fails
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched When a Purchases Restore fails
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent_skProductDetailsFailed"><apiName>skProductDetailsFailed</apiName><shortdesc> Dispatched When a Product list loading fails 
 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched When a Product list loading fails 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.ios:StoreKit_com.milkmangames.nativeextensions.ios.events.StoreKitEvent_skProductDetailsLoaded"><apiName>skProductDetailsLoaded</apiName><shortdesc> Disapatched when the product list has been loaded.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Disapatched when the product list has been loaded.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="com.milkmangames.nativeextensions.ios:StoreKit:StoreKit"><apiName>StoreKit</apiName><shortdesc>
	 Do not call this directly; use StoreKit.create() to initialize or StoreKit.storeKit to get current instance.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>forceUseOfOldReceiptFormats</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>logCallback</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
	 Do not call this directly; use StoreKit.create() to initialize or StoreKit.storeKit to get current instance.
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:create"><apiName>create</apiName><shortdesc>
	 Initializes the StoreKit Extension.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if StoreKit has already been initialized.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>initialized instance of StoreKit extension interface.
	 </apiDesc><apiOperationClassifier>com.milkmangames.nativeextensions.ios:StoreKit</apiOperationClassifier></apiReturn><apiParam><apiItemName>forceUseOfOldReceiptFormats</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if set to true, force the extension to set the .receipt value of StoreKitEvent.PURCHASE_SUCCEEDED using the Apple receipt format that existed prior to the universal app store receipt binary format, regardless of iOS version.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Initializes the StoreKit Extension.  You should check StoreKit.isSupported first to ensure the platform is iOS.
	 StoreKit is a Singleton and you may have only one instance.  After creation, you may access the instance through
	 the static property StoreKit.storeKit .
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:displayProductView"><apiName>displayProductView</apiName><shortdesc>
	 Displays an in-app view of the given product ID (such as a iTunes Song) within your app.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>productId</apiItemName><apiType value="String"/><apiDesc>the iTunes ID for the content to display
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Displays an in-app view of the given product ID (such as a iTunes Song) within your app.
	 
	 This function is available only on iOS 6+.  You should check isProductViewAvailable() before calling this method.
	 
	 When the product view is displayed, StoreKitEvent.PRODUCT_VIEW_DISPLAYED will be dispatched, and the inner content of the view attempts to load.  When the content has loaded, StoreKitEvent.PRODUCT_VIEW_LOADED is dispatched; if the request fails, StoreKitErrorEvent.PRODUCT_VIEW_FAILED will be dispatched instead.  When the product view is dismissed by the user, StoreKitEvent.PRODUCT_VIEW_DISMISSED is dispatched.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.ios.events.xml#StoreKitEvent"><linktext>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</linktext></link><link href="com.milkmangames.nativeextensions.ios.events.xml#StoreKitErrorEvent"><linktext>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:dispose"><apiName>dispose</apiName><shortdesc> Dispose of Context </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Dispose of Context </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:getAppReceipt"><apiName>getAppReceipt</apiName><shortdesc>
	 Get the App Receipt for this application (as a base64 encoded string of the binary data.)
	 
	 This function is not available on all iOS versions; always check isAppReceiptAvailable() first
	 
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>base64 encoded App receipt
	 </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	 Get the App Receipt for this application (as a base64 encoded string of the binary data.)
	 
	 This function is not available on all iOS versions; always check isAppReceiptAvailable() first
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:isAppReceiptAvailable"><apiName>isAppReceiptAvailable</apiName><shortdesc>
	 Checks whether the current device supports the loading of the Apple App Receipt (iOS 7+).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the current device is able to retrieve the App Receipt
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks whether the current device supports the loading of the Apple App Receipt (iOS 7+).  Check this before attempting to call refreshAppReceipt().
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:isHostedContentAvailable"><apiName>isHostedContentAvailable</apiName><shortdesc>
	 Checks if Apple-hosted content is available on the device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the current device supports hosted content
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks if Apple-hosted content is available on the device.  
	 
	 Hosted content works only on iOS 6+ devices, and download events will not be dispatched otherwise.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:isProductViewAvailable"><apiName>isProductViewAvailable</apiName><shortdesc> Checks if displaying iTunes Store Products via displayProductView() is available on the device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the current device supports displayProductView()
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Checks if displaying iTunes Store Products via displayProductView() is available on the device.
	 
	 ProductView is available only on iOS 6+ devices.  You should check this method before calling displayProductView().
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:isStoreKitAvailable"><apiName>isStoreKitAvailable</apiName><shortdesc>
	 Checks if purchases allowed on this device (ie, parental controls may prevent them.) Call this after StoreKit.create() and before making any other calls.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the running device is capable of making purchases.
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks if purchases allowed on this device (ie, parental controls may prevent them.) Call this after StoreKit.create() and before making any other calls.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:isSupported"><apiName>isSupported</apiName><shortdesc>
	 Checks if the current platform supports StoreKit.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if StoreKit is supported; false otherwise.
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks if the current platform supports StoreKit.  Note that this only determines whether the app is running under iOS (as opposed to Android, Windows, etc.)
	 
	 Use this call before initializing StoreKit in order to confirm that you are on iOS.  (So that you can avoid initializing StoreKit on an unsupported platform when building a multi-platform app.)
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:loadProductDetails"><apiName>loadProductDetails</apiName><shortdesc>
	 Calls the iTunes Connect server for a list of product details (ie, title, price, etc) for the given list of product IDs.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>productIDs</apiItemName><apiType value="Vector$String"/><apiDesc>a Vector Array of the product IDs to request details for.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Calls the iTunes Connect server for a list of product details (ie, title, price, etc) for the given list of product IDs.
	 Even if you do not need to know the details, you must call this before making any calls to purchaseProduct().
	 
	 On Completion, a StoreKitEvent.PRODUCT_DETAILS_LOADED event will be fired, with a validProducts property containing a Vector array
	 of the StoreKitProduct instances found for your request.  Any productIDs you passed in that were not found on the server will be
	 in the invalidProductIds property (a Vector array of Strings) of the same event.
	 
	 If there is an error loading the details, StoreKitErrorEvent.PRODUCT_DETAILS_FAILED will be dispatched instead.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitEvent</linktext></link><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitErrorEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:manualFinishTransaction"><apiName>manualFinishTransaction</apiName><shortdesc>
	 Manually finish a transaction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transactionId</apiItemName><apiType value="String"/><apiDesc>transactionID string to finish.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Manually finish a transaction.  
	 
	 Available only if setManualTransactionMode(true) has been called.  Use this to notify iOS that you've validated a transaction, if you are using
	 your own backend system for transaction verification.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:purchaseProduct"><apiName>purchaseProduct</apiName><shortdesc>
	 Makes a request to purchase a product for the given productID, in the given quantity.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>if the quantity is invalid.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>productID</apiItemName><apiType value="String"/><apiDesc> </apiDesc></apiParam><apiParam><apiItemName>quantity</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc> </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Makes a request to purchase a product for the given productID, in the given quantity.  iOS will ask the user to confirm the purchase,
	 and enter their password if appropriate; then execute the purchase.
	 
	 If the user cancels the purchase, the StoreKitEvent.PURCHASE_CANCELLED event will be dispatched.
	 
	 If the purchase succeeds, the StoreKitEvent.PURCHASE_SUCCEEDED event will be dispatched.
	 
	 If the purchase fails, the StoreKitErrorEvent.PURCHASE_FAILED event will be dispatched.
	 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitEvent</linktext></link><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitErrorEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:readXmlNumber"><apiName>readXmlNumber</apiName><shortdesc> Read Object Number </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>inObj</apiItemName><apiType value="XML"/></apiParam><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>defaultValue</apiItemName><apiType value="Number"/><apiData>0</apiData></apiParam></apiOperationDef><apiDesc> Read Object Number </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:refreshAppReceipt"><apiName>refreshAppReceipt</apiName><shortdesc>
	 Refresh the App Receipt for this application.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>testExpired</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if true, make a sandbox receipt behave as if it's expired.  NEVER SET THIS TO TRUE in a production release.
	 </apiDesc></apiParam><apiParam><apiItemName>testRevoked</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if true, make a sandbox receipt behave as if it's revoked.  NEVER SET THIS TO TRUE in a production release.
	 </apiDesc></apiParam><apiParam><apiItemName>testVolume</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if true, make a sandbox receipt behave as if it's a volume purchase. s NEVER SET THIS TO TRUE in a production release.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Refresh the App Receipt for this application.
	 
	 This function is not available on all iOS versions; always check isAppReceiptAvailable() first.
	 
	 If the refresh succeeds, StoreKitEvent.APP_RECEIPT_REFRESHED will be called and its receipt property will contains the binary receipt data as a base64 encoded string.
	 
	 If the refresh fails, StoreKitErrorEvent.APP_RECEIPT_REFRESH_FAILED will be called instead.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.ios.events.xml#StoreKitEvent"><linktext>com.milkmangames.nativeextensions.ios.events.StoreKitEvent</linktext></link><link href="com.milkmangames.nativeextensions.ios.events.xml#StoreKitErrorEvent"><linktext>com.milkmangames.nativeextensions.ios.events.StoreKitErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:restoreTransactions"><apiName>restoreTransactions</apiName><shortdesc>
	 Restores previous transactions on the device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Restores previous transactions on the device.  Apple reccommends presenting a button to the user that will allow them to run this call.
	 It is intended to be used in cases where the user had previously bought the app, then uninstalled it - losing their saved state- and installed it again.
	 
	 When you call restoreTransactions(), you will receive StoreKitEvent.PURCHASE_SUCCEEDED events for previously completed transactions.
	 When all the previous transactions are done firing their StoreKitEvent.PURCHASE_SUCCEEDED events, StoreKitEvent.TRANSACTIONS_RESTORED will be dispatched.
	 
	 If an error occurs invoking the transaction restore, StoreKitErrorEvent.TRANSACTION_RESTORE_FAILED will be dispatched.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitEvent</linktext></link><link href="" invalidHref="com.milkmangames.extensions.ios.events.StoreKitErrorEvent.xml"><linktext>com.milkmangames.extensions.ios.events.StoreKitErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.ios:StoreKit:setManualTransactionMode"><apiName>setManualTransactionMode</apiName><shortdesc>
	 Enable or disable manual transaction mode.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isManual</apiItemName><apiType value="Boolean"/><apiDesc>set true to enable manual transaction finishing.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Enable or disable manual transaction mode.
	 
	 If you are implementing back-end verification of transactions on your own server, you can enable manual mode by calling setManualTransactionMode(true),
	 after which, you can call manualFinishTransaction(transactionId) after your server has validated a transaction, to notify iOS that the transaction is
	 finished and stop notifying the client it's pending.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions.ios:StoreKit:VERSION"><apiName>VERSION</apiName><shortdesc>
	 Current API Version
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3.0.0</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 Current API Version
	 </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.ios:StoreKit:storeKit:get"><apiName>storeKit</apiName><shortdesc>
	 The current instance of the StoreKit singelton.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.milkmangames.nativeextensions.ios:StoreKit</apiValueClassifier><apiException><apiDesc>if StoreKit.create() was not called before first accessing this property.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The current instance of the StoreKit singelton.  You must call StoreKit.create() before this property is available.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>