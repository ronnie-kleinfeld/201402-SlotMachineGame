<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.milkmangames.nativeextensions.android"><apiName>com.milkmangames.nativeextensions.android</apiName><apiDetail/><apiClassifier id="com.milkmangames.nativeextensions.android:AndroidPurchase"><apiName>AndroidPurchase</apiName><shortdesc> Android Purchase </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Android Purchase </apiDesc></apiClassifierDetail><apiConstructor id="com.milkmangames.nativeextensions.android:AndroidPurchase:AndroidPurchase"><apiName>AndroidPurchase</apiName><shortdesc> Create New AndroidPurchase </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Create New AndroidPurchase </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.milkmangames.nativeextensions.android:AndroidPurchase:toString"><apiName>toString</apiName><shortdesc> Return String Representation </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc> Return String Representation </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:developerPayload"><apiName>developerPayload</apiName><shortdesc> Developer Payload </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Developer Payload </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:itemId"><apiName>itemId</apiName><shortdesc> The Product itemID  </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The Product itemID  </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:itemType"><apiName>itemType</apiName><shortdesc> Item Type </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Item Type </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:jsonData"><apiName>jsonData</apiName><shortdesc> Signed JSON data associated with this response.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Signed JSON data associated with this response. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:orderId"><apiName>orderId</apiName><shortdesc> Order ID </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Order ID </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:purchaseTime"><apiName>purchaseTime</apiName><shortdesc> Item Purchase Time </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> Item Purchase Time </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:purchaseToken"><apiName>purchaseToken</apiName><shortdesc> Purchase Token </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Purchase Token </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidPurchase:signature"><apiName>signature</apiName><shortdesc> Signature associated with this response.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Signature associated with this response. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions.android:AndroidIAB"><apiName>AndroidIAB</apiName><shortdesc> Android In-App Billing </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Android In-App Billing </apiDesc></apiClassifierDetail><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent_CONSUME_FAILED"><apiName>CONSUME_FAILED</apiName><shortdesc> Dispatched when a call to consumeItem() has failed </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to consumeItem() has failed </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent_ITEM_DETAILS_FAILED"><apiName>ITEM_DETAILS_FAILED</apiName><shortdesc> Dispatched when a call to loadItemDetails() has failed </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to loadItemDetails() has failed </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent_LOAD_INVENTORY_FAILED"><apiName>LOAD_INVENTORY_FAILED</apiName><shortdesc> Dispatched when a call to loadPlayerInventory() has failed </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to loadPlayerInventory() has failed </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent_PURCHASE_FAILED"><apiName>PURCHASE_FAILED</apiName><shortdesc> Dispatched when a purchase attempt fails </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a purchase attempt fails </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_PURCHASE_SUCCEEDED"><apiName>PURCHASE_SUCCEEDED</apiName><shortdesc> Dispatched when an item has been successfully purchased </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when an item has been successfully purchased </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_CONSUME_SUCCEEDED"><apiName>CONSUME_SUCCEEDED</apiName><shortdesc> Dispatched when a call to consumeItem() has succeeded </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to consumeItem() has succeeded </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_ITEM_DETAILS_LOADED"><apiName>ITEM_DETAILS_LOADED</apiName><shortdesc> Dispatched when a call to loadItemDetails() has succeeded </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to loadItemDetails() has succeeded </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_INVENTORY_LOADED"><apiName>INVENTORY_LOADED</apiName><shortdesc> Dispatched when a call to loadPlayerInventory() has succeeded </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a call to loadPlayerInventory() has succeeded </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_SERVICE_NOT_SUPPORTED"><apiName>SERVICE_NOT_SUPPORTED</apiName><shortdesc> Dispatched if the billing service will not work on this device </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched if the billing service will not work on this device </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions.android:AndroidIAB_com.milkmangames.nativeextensions.android.events.AndroidBillingEvent_SERVICE_READY"><apiName>SERVICE_READY</apiName><shortdesc> Dispatched when the billing service is ready to use </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the billing service is ready to use </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="com.milkmangames.nativeextensions.android:AndroidIAB:AndroidIAB"><apiName>AndroidIAB</apiName><shortdesc>
	 Do not call this directly.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Do not call this directly.  Use AndroidIAB.create() to Initialize,
	 then you can use AndroidIAB.androidIAB thereafter.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:areSubscriptionsSupported"><apiName>areSubscriptionsSupported</apiName><shortdesc>
	 Tests if subscriptions are supported on this device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Tests if subscriptions are supported on this device.  This will not return until after the 
	 SERVICE_READY event has been finished.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:consumeItem"><apiName>consumeItem</apiName><shortdesc>
	 Initiates a request to consume an item in the player's inventory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>itemId</apiItemName><apiType value="String"/><apiDesc>the item sku to consume
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Initiates a request to consume an item in the player's inventory.  A previous call to loadPlayerInventory() must completed first, and contain the given itemId in the user's current inventory.
	 
	 When an item is successfully consumed, AndroidBillingEvent.CONSUME_SUCCEEDED will be dispatched.  The item will then no longer be in the player's inventory, and can be purchased again.  You can query the server for the latest inventory items using loadPlayerInventory().
	 
	 If the request fails, AndroidBillingErrorEvent.CONSUME_FAILED will be dispatched.
	 
	 Note that Google Play no longer distinguishes between managed and unmanaged items: all items are managed, and any item may be consumed.  
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorID"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorID</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:create"><apiName>create</apiName><shortdesc>
	 Initializes the Android Billing Extension.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AndroidIAB has already been initialized.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>initialized instance of AndroidIAB extension interface.
	 </apiDesc><apiOperationClassifier>com.milkmangames.nativeextensions.android:AndroidIAB</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Initializes the Android Billing Extension.  You should check AndroidIAB.isSupported() first to ensure the platform is Android.
	 AndroidIAB is a Singleton and you may have only one instance.  After creation, you may access the instance through
	 the static property AndroidIAB.androidIAB .
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:isBillingServiceRunning"><apiName>isBillingServiceRunning</apiName><shortdesc>
	 Checks if the Google Play billing service is available and running on the running device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the current device supports Google Play Billing and is running the service.
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks if the Google Play billing service is available and running on the running device.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:isSupported"><apiName>isSupported</apiName><shortdesc>
	 Checks if the current platform supports the AndroidIAB extension.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true if AndroidIAB is supported; false otherwise.
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks if the current platform supports the AndroidIAB extension.  Note that this only determines whether the app is running under Android (as opposed to iOS, Windows, etc.), and will NOT tell you whether the particular device has Google Play installed.
	 
	 Use this call before initializing AndroidIAB in order to confirm that you are on Android.  (So that you can avoid initializing AndroidIAB on an unsupported platform when building a multi-platform app.)
	 
	 After initialization, you can call AndroidIAB.androidIAB.startBillingService() and wait for the AndroidBillingEvent.SERVICE_READY event to begin making calls.
	 If the particular device can't support the billing service, you'll receive AndroidBillingErrorEvent.SERVICE_NOT_SUPPORTED event instead.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:launchProductPage"><apiName>launchProductPage</apiName><shortdesc>
	 Launches the product details page on Google Play for your app.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Launches the product details page on Google Play for your app.
	 
	 If your app supports subscriptiont content, you can make this available in the UI, so that the user may
	 cancel or view an active subscription should they wish.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:loadItemDetails"><apiName>loadItemDetails</apiName><shortdesc>
	 Makes a request to load details (such as price, title, etc) about the given list of item ids.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>itemIds</apiItemName><apiType value="Vector$String"/><apiDesc>list of item ids to load AndroidItemDetails for
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Makes a request to load details (such as price, title, etc) about the given list of item ids.
	 
	 When the request is completed, AndroidBillingEvent.ITEM_DETAILS_LOADED will be dispatched, and its itemDetails property will be populated with a vector array of AndroidItemDetails objects for each item id requested.
	 
	 If the request fails, AndroidBillingErrorEvent.ITEM_DETAILS_FAILED will be dispatched instead.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorID"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorID</linktext></link><link href="com.milkmangames.nativeextensions.android.xml#AndroidItemDetails"><linktext>com.milkmangames.nativeextensions.android.AndroidItemDetails</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:loadPlayerInventory"><apiName>loadPlayerInventory</apiName><shortdesc>
	 Initiates a request to load the list of items the user currently owns.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>withItemDetails</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>if set true, the response AndroidBillingEvent.itemDetails will be populated with a vector array of AndroidItemDetails objects
	 </apiDesc></apiParam><apiParam><apiItemName>extraDetailItemIds</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>list of item ids to load AndroidItemDetails for, even if the items are not yet owned
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Initiates a request to load the list of items the user currently owns.  Because Google Play now manages all items and their consumption state, you may use this call at any time to get the latest inventory, instead of managing it yourself locally.
	 
	 When the request is completed, AndroidBillingEvent.INVENTORY_LOADED will be dispatched, and its purchases property will be a vector array populated with AndroidPurchase objects representing each item the player currently owns.
	 
	 Optionally, if you set the withDetailItems parameter to true, the event's itemDetails property will also be populated with a vector array of AndroidItemDetails objects for each item the player owns.  If you fill the optional extraDetailItemIds parameter with a vector array of item ids, AndroidItemDetails will be loaded for these ids as well, even if the player does not currently own them.  These two parameters can be used to reduce the number of network requests by foregoing the need to call loadItemDetails separately.
	 
	 If the request fails, AndroidBillingErrorEvent.LOAD_INVENTORY_FAILED will be dispatched instead.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorID"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorID</linktext></link><link href="com.milkmangames.nativeextensions.android.xml#AndroidPurchase"><linktext>com.milkmangames.nativeextensions.android.AndroidPurchase</linktext></link><link href="com.milkmangames.nativeextensions.android.xml#AndroidItemDetails"><linktext>com.milkmangames.nativeextensions.android.AndroidItemDetails</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:purchaseItem"><apiName>purchaseItem</apiName><shortdesc>
	 Sends a request to Google Play to purchase an item with this particular itemID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>itemId</apiItemName><apiType value="String"/><apiDesc>the item id, set in your Google Play developer panel, for this item.
	 </apiDesc></apiParam><apiParam><apiItemName>payload</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Optional.  A string value that will be permanently associated with the transaction after it succeeds.  Advanced users may wish to use the payload later as part of a back-end verification / security scheme.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sends a request to Google Play to purchase an item with this particular itemID.  The item
	 should be declared inside the 'in-app products' section of the Google Play developer panel.
	 
	 After the transaction attempt is complete, you'll receive either an AndroidBillingEvent or an
	 AndroidBillingErrorEvent, depending on the result:
		 
		 AndroidBillingEvent.PURCHASE_SUCCEEDED will be fired if the item was bought successfully.
		 AndroidBillingErrorEvent.PURCHASE_FAILED will be fired if a network or other error made the purchase fail.
	 
	 After a successful purchase, the event's purchases property will be a vector array containing the new AndroidPurchase object.  If the purchase fails, the AndroidBillingErrorEvent.PURCHASE_FAILED event's errorID property will be one of the AndroidBillingErrorID constants.  Refer to these for additional information about the reason a purchase may have failed.
	 
	 After the event is dispatched, use loadPlayerInventory() to get the new list of owned items.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorID"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorID</linktext></link><link href="com.milkmangames.nativeextensions.android.xml#AndroidPurchase"><linktext>com.milkmangames.nativeextensions.android.AndroidPurchase</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:purchaseSubscriptionItem"><apiName>purchaseSubscriptionItem</apiName><shortdesc>
	 Sends a request to Google Play to purchase a subscription item with this particular itemID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiException><apiDesc>the device does not support subscriptions.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>itemId</apiItemName><apiType value="String"/><apiDesc>the item id, set in your Google Play panel, for this item.
	 </apiDesc></apiParam><apiParam><apiItemName>payload</apiItemName><apiType value="String"/><apiData/><apiDesc>Optional.  A string value that will be permanently associated with the transaction after it succeeds.  Advanced users may wish to use the payload later as part of a back-end verification / security scheme.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sends a request to Google Play to purchase a subscription item with this particular itemID.  The item
	 should be declared inside the 'in-app products' section of the Google Play developer panel, and MUST
	 be set as a SUBSCRIPTION ITEM.
	 
	 This call will only work if the device has a Google Play version supporting subscription content.  To determine
	 this, call areSubscriptionsSupported() first.  If you call purchaseSubscriptionItem() when subscriptions 
	 are not supported, an Error will be thrown.
	 
	 After the transaction attempt is complete, you'll receive either an AndroidBillingEvent or an
	 AndroidBillingErrorEvent, depending on the result:
		 AndroidBillingEvent.PURCHASE_SUCCEEDED will be fired if the item was bought successfully.
		 AndroidBillingErrorEvent.PURCHASE_FAILED will be fired if a network or other error made the purchase fail.
	 
	 After a successful purchase, the event's purchases property will be a vector array containing the new AndroidPurchase object.  If the purchase fails, the AndroidBillingErrorEvent.PURCHASE_FAILED event's errorID property will be one of the AndroidBillingErrorID constants.  Refer to these for additional information about the reason a purchase may have failed.
	 
	 After the event is dispatched, use loadPlayerInventory() to get the new list of owned items.  When a subscription has expired, it will no longer appear in the inventory.
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:startBillingService"><apiName>startBillingService</apiName><shortdesc>
	 Starts the billing service, which allows you to make purchases, and listen for changes
	 in the user's purchase inventory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the billing service is already started.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>publicKey</apiItemName><apiType value="String"/><apiDesc>your public key for in-app purchases for this app.  You can find this by logging 
	 into your Google Play account, and selecting your app, then services and APIs
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Starts the billing service, which allows you to make purchases, and listen for changes
	 in the user's purchase inventory.
	 
	 Before calling this, you should be listening for AndroidBillingEvent.SERVICE_READY and
	 AndroidBillingEvent.SERVICE_NOT_SUPPORTED events.  When you receive SERVICE_READY, you 
	 may begin making purchases and calling the other methods of AndroidIAB.  
	 
	 If you receive SERVICE_NOT_SUPPORTED, the device is not capable of handling in-app
	 billing and you will not be able to use it.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:stopBillingService"><apiName>stopBillingService</apiName><shortdesc>
	 Completely shutsdown the billing service.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the billing service is not running or has already been stopped.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Completely shutsdown the billing service.  You can call this to completely stop
	 receiving notifications of billing state changes. 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:testPurchaseItemCancelled"><apiName>testPurchaseItemCancelled</apiName><shortdesc>
	 Simulates the cancellation of a purchased item, without actually having your app published yet.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Simulates the cancellation of a purchased item, without actually having your app published yet.
	 After the purchase UI is completed, you'll receive the AndroidBillingErrorEvent.PURCHASE_FAILED event.
	 This is useful for testing your code, without actually having published your application yet, or having
	 to make a purchase with real money for testing.
	 
	 Even though this is a refund test item, the item will appear in the player's inventory, until an indeterminate point in the future when it is removed.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:testPurchaseItemRefunded"><apiName>testPurchaseItemRefunded</apiName><shortdesc>
	 Simulates the refunding of a purchased item, without actually having your app published yet.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Simulates the refunding of a purchased item, without actually having your app published yet.
	 After the purchase UI is completed, you'll receive the AndroidBillingEvent.PURCHASE_SUCCEEDED event.
	 This is useful for testing your code, without actually having published your application yet, or having
	 to make a purchase with real money for testing.
	 
	 Even though this is a refund test item, the item will appear in the player's inventory, until an indeterminate point in the future when it is removed.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:testPurchaseItemSuccess"><apiName>testPurchaseItemSuccess</apiName><shortdesc>
	 Simulates the successful purchase of an item, without actually having your app published yet.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Simulates the successful purchase of an item, without actually having your app published yet.
	 After the purchase UI is completed, you'll receive the AndroidBillingEvent.PURCHASE_SUCCEEDED event.
	 This is useful for testing your code, without actually having published your application yet, or having
	 to make a purchase with real money for testing.
	 
	 Note that although this is a 'test' item, it will still be added to the player inventory, and can be consumed using consumeItem().  You cannot remove the purchase through the Google Play control panel, but it may eventually be purged on its own.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions.android:AndroidIAB:testPurchaseItemUnavailable"><apiName>testPurchaseItemUnavailable</apiName><shortdesc>
	 Simulates the attempted purchase of an invalid item id, without actually having your app published yet.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>the Billing service is not currently running.
	 </apiDesc><apiItemName>Error	if</apiItemName><apiOperationClassifier>Error	if</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Simulates the attempted purchase of an invalid item id, without actually having your app published yet.
	 After the purchase UI is completed, you'll receive the AndroidBillingErrorEvent.PURCHASE_FAILED event.
	 This is useful for testing your code, without actually having published your application yet, or having
	 to make a purchase with real money for testing.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.android.events.xml#AndroidBillingErrorEvent"><linktext>com.milkmangames.nativeextensions.android.events.AndroidBillingErrorEvent</linktext></link></related-links></apiOperation><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:TEST_ITEM_ID_CANCELLED"><apiName>TEST_ITEM_ID_CANCELLED</apiName><shortdesc> Special Item ID used for a test of a cancelled item, without actually buying or cancelling anything.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>android.test.canceled</apiData><apiType value="String"/></apiValueDef><apiDesc> Special Item ID used for a test of a cancelled item, without actually buying or cancelling anything.
	 
	 After calling testPurchaseItemCancelled(), the AndroidBillingEvent fired will include this as the .itemID property. 
	 
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemCancelled().xml"><linktext>com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemCancelled()</linktext></link></related-links></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:TEST_ITEM_ID_PURCHASED"><apiName>TEST_ITEM_ID_PURCHASED</apiName><shortdesc> Special Item ID used for a test of the successful purchase of an item, without actually buying anything.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>android.test.purchased</apiData><apiType value="String"/></apiValueDef><apiDesc> Special Item ID used for a test of the successful purchase of an item, without actually buying anything.
	 
	 After calling testPurchaseItemSuccess(), the AndroidBillingEvent fired will include this as the .itemID property. 
	 
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemSuccess().xml"><linktext>com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemSuccess()</linktext></link></related-links></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:TEST_ITEM_ID_REFUNDED"><apiName>TEST_ITEM_ID_REFUNDED</apiName><shortdesc> Special Item ID used for a test of a refunded item, without actually buying or refunding anything.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>android.test.refunded</apiData><apiType value="String"/></apiValueDef><apiDesc> Special Item ID used for a test of a refunded item, without actually buying or refunding anything.
	 
	 After calling testPurchaseItemRefunded(), the AndroidBillingErrorvent fired will include this as the .itemID property. 
	 
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemRefunded().xml"><linktext>com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemRefunded()</linktext></link></related-links></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:TEST_ITEM_ID_UNAVAILABLE"><apiName>TEST_ITEM_ID_UNAVAILABLE</apiName><shortdesc> Special Item ID used for a test of an unavailable item, without actually buying anything.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>android.test.item_unavailable</apiData><apiType value="String"/></apiValueDef><apiDesc> Special Item ID used for a test of an unavailable item, without actually buying anything.  'Unavailable' means
	 the itemID doesn't exist in your Google Play Publisher control panel.
	 
	 After calling testPurchaseItemUnavailable(), the AndroidBillingEvent fired will include this as the .itemID property. 
	 
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemUnavailable().xml"><linktext>com.milkmangames.nativeextensions.android.AndroidIAB.testPurchaseItemUnavailable()</linktext></link></related-links></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:VERSION"><apiName>VERSION</apiName><shortdesc> Version </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.6.0</apiData><apiType value="String"/></apiValueDef><apiDesc> Version </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidIAB:androidIAB:get"><apiName>androidIAB</apiName><shortdesc>
	 The current instance of the AndroidIAB singleton.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.milkmangames.nativeextensions.android:AndroidIAB</apiValueClassifier></apiValueDef><apiDesc>
	 The current instance of the AndroidIAB singleton.  You must call AndroidIAB.create() before this property is available.
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions.android:AndroidItemType"><apiName>AndroidItemType</apiName><shortdesc> Android Billing Item Types </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Android Billing Item Types </apiDesc></apiClassifierDetail><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemType:IN_APP_PURCHASE"><apiName>IN_APP_PURCHASE</apiName><shortdesc> In-App Purchase Item </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inapp</apiData><apiType value="String"/></apiValueDef><apiDesc> In-App Purchase Item </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemType:SUBSCRIPTION"><apiName>SUBSCRIPTION</apiName><shortdesc> Subscription Item </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subs</apiData><apiType value="String"/></apiValueDef><apiDesc> Subscription Item </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions.android:AndroidItemDetails"><apiName>AndroidItemDetails</apiName><shortdesc> Android Item Details </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Android Item Details </apiDesc></apiClassifierDetail><apiConstructor id="com.milkmangames.nativeextensions.android:AndroidItemDetails:AndroidItemDetails"><apiName>AndroidItemDetails</apiName><shortdesc> Create New AndroidItem </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Create New AndroidItem </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.milkmangames.nativeextensions.android:AndroidItemDetails:toString"><apiName>toString</apiName><shortdesc> Return String Representation </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc> Return String Representation </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:description"><apiName>description</apiName><shortdesc> Description </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Description </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:itemId"><apiName>itemId</apiName><shortdesc> The Product itemID  </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The Product itemID  </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:itemType"><apiName>itemType</apiName><shortdesc> Item Type </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Item Type </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:priceAmountMicros"><apiName>priceAmountMicros</apiName><shortdesc> Price amount micros </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> Price amount micros </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:priceCurrencyCode"><apiName>priceCurrencyCode</apiName><shortdesc> Price currency code </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Price currency code </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:price"><apiName>price</apiName><shortdesc> Price </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Price </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions.android:AndroidItemDetails:title"><apiName>title</apiName><shortdesc> Title </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> Title </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>