package com.gotchaslots.slots.ui.machine
{
	import com.gotchaslots.common.mobile.data.Main;
	import com.gotchaslots.common.mobile.data.session.level.LevelData;
	import com.gotchaslots.common.mobile.ui.machine.CommonMachineController;
	import com.gotchaslots.common.mobile.utils.ex.TimerEx;
	import com.gotchaslots.common.mobile.utils.helpers.FormatterHelper;
	import com.gotchaslots.slots.data.machine.valuator.ValuatorsHandler;
	import com.gotchaslots.slots.ui.notifications.SlotsNotificationsHandler;
	import com.gotchaslots.slots.utils.sounds.SlotsSoundsManager;
	
	import flash.events.TimerEvent;
	
	public class SlotsMachineController extends CommonMachineController
	{
		// members
		private var _valuatorsHandler:ValuatorsHandler;
		
		// class
		public function SlotsMachineController()
		{
			super();
		}
		
		public override function Init():void
		{
			super.Init();
			
			if (_activeMachine.LobbyMachine.MachineSession.FreeSpinsPendingCount > 0)
			{
				SlotsMachineView(View).Disable();
				Main.Instance.Application.Ticker.Stop();
				Main.Instance.Application.Ticker.PushMessage("Starting Free Spins...", "", true);
				
				var pauseTimer:TimerEx = new TimerEx(1500);
				pauseTimer.addEventListener(TimerEvent.TIMER, OnPauseTimer);
				pauseTimer.start();
			}
			else
			{
				DoIdle();
			}
		}
		
		// methods
		public function MaxBet():void
		{
			_activeMachine.SetToMaxTotalBet();
			DoSpin(true);
		}
		
		// sequence
		// idle
		public function DoIdle():void
		{
			_activeMachine.IsIdle = true;
			if (Main.Instance.Session.Rare.PendingLevelUpPopups.length > 0 || Main.Instance.Session.Rare.PendingNewMachinePopups.length > 0)
			{
				DoShowPendingPopups();
			}
			else
			{
				if (_activeMachine.LobbyMachine.MachineSession.FreeSpinsPendingCount == 0)
				{
					if (_activeMachine.IsAutoSpin)
					{
						DoSpin(false);
					}
					else
					{
						SlotsMachineView(View).Enable();
						SlotsMachineView(View).GetReelsPanel.GetAnimatePaylines.Start(_valuatorsHandler);
					}
				}
				else
				{
					DoSpin(Main.Instance.Session.Rare.AdjustTotalBetOnLowChips);
				}
			}
		}
		private function DoShowPendingPopups():void
		{
			SlotsMachineView(View).Enable();
			Main.Instance.Session.Rare.PendingLevelUpPopups.reverse();
			Main.Instance.Session.Rare.PendingNewMachinePopups.reverse();
			
			if (Main.Instance.Session.Rare.PendingNewMachinePopups.length > 0)
			{
				while (Main.Instance.Session.Rare.PendingLevelUpPopups.length > 0)
				{
					SlotsNotificationsHandler.Instance.ShowLevelUpPopup(new LevelData(int(Main.Instance.Session.Rare.PopPendingLevelUpPopups())), null);
				}
				
				while (Main.Instance.Session.Rare.PendingNewMachinePopups.length > 1)
				{
					SlotsNotificationsHandler.Instance.ShowNewMachinePopup(Main.Instance.GetLobbyMachineByMachineID(Main.Instance.Session.Rare.PopPendingNewMachinePopups()), null);
				}
				SlotsNotificationsHandler.Instance.ShowNewMachinePopup(Main.Instance.GetLobbyMachineByMachineID(Main.Instance.Session.Rare.PopPendingNewMachinePopups()), DoIdle);
			}
			else
			{
				while (Main.Instance.Session.Rare.PendingLevelUpPopups.length > 1)
				{
					SlotsNotificationsHandler.Instance.ShowLevelUpPopup(new LevelData(int(Main.Instance.Session.Rare.PopPendingLevelUpPopups())), null);
				}
				SlotsNotificationsHandler.Instance.ShowLevelUpPopup(new LevelData(int(Main.Instance.Session.Rare.PopPendingLevelUpPopups())), DoIdle);
			}
		}
		
		// spin
		public function DoAutoSpin(hasSetToMaxTotalBet:Boolean):void
		{
			if (_activeMachine.IsIdle)
			{
				DoSpin(hasSetToMaxTotalBet);
			}
		}
		public override function DoSpin(hasSetToMaxTotalBet:Boolean):void
		{
			if (_active)
			{
				_activeMachine.IsIdle = false;
				
				SlotsMachineView(View).Disable();
				SlotsMachineView(View).GetReelsPanel.GetAnimatePaylinesBox.Stop();
				SlotsMachineView(View).GetReelsPanel.GetAnimatePaylines.Stop();
				Main.Instance.Application.Ticker.Stop();
				Main.Instance.Application.Ticker.PushMessage("Spinning", "", true);
				
				if (_activeMachine.LobbyMachine.MachineSession.FreeSpinsPendingCount == 0)
				{
					if (Main.Instance.Session.Wallet.GetBalance < _activeMachine.GetTotalBets.MinTotalBet.TotalBet)		// balance is less than the minimum avaliable total bet
					{
						SlotsNotificationsHandler.Instance.ShowNoChipsPopup(DoNoSpin);
					}
					else if (Main.Instance.Session.Wallet.GetBalance < _activeMachine.TotalBetChips)					// balance is less than the current total bet
					{
						if (hasSetToMaxTotalBet)																		// allready adjusted balance
						{
							SlotsNotificationsHandler.Instance.ShowNoChipsPopup(DoNoSpin);
						}
						else
						{
							if (Main.Instance.Session.Rare.AdjustTotalBetOnLowChips)									// is auto adjust
							{
								MaxBet();																				// auto adjust
							}
							else																		
							{
								SlotsNotificationsHandler.Instance.ShowLowChipsPopup(DoNoSpin);								// adjust popup
							}
						}
					}
					else
					{
						_activeMachine.GetResultMatrixHandler.GetResultMatrix(_activeMachine.SelectedPaylines, _activeMachine.SelectedBetChips, _activeMachine.TotalBetChips);
						SlotsMachineView(View).GetReelsPanel.GetReels.Start();
						Main.Instance.Session.Wallet.SpinStarted(_activeMachine.TotalBetChips, _activeMachine.TotalBetChips, false);
						_activeMachine.Win = 0;
						_activeMachine.LobbyMachine.MachineSession.FreeSpinsSpinStarted();
						Main.Instance.Sounds.Play(SlotsSoundsManager.Machine_Sequence_Spinning);
					}
				}
				else
				{
					_activeMachine.GetResultMatrixHandler.GetResultMatrix(_activeMachine.SelectedPaylines, _activeMachine.SelectedBetChips, _activeMachine.TotalBetChips);
					SlotsMachineView(View).GetReelsPanel.GetReels.Start();
					Main.Instance.Session.Wallet.SpinStarted(_activeMachine.TotalBetChips, _activeMachine.TotalBetChips, true);
					_activeMachine.Win = 0;
					_activeMachine.LobbyMachine.MachineSession.FreeSpinsSpinStarted();
					Main.Instance.Sounds.Play(SlotsSoundsManager.Machine_Sequence_Spinning);
				}
			}
		}
		private function DoNoSpin():void
		{
			if (_active)
			{
				_activeMachine.IsAutoSpin = false;
				SlotsMachineView(View).Enable();
				DoIdle();
			}
		}
		
		// stopped
		public function ReelStopped():void
		{
			Main.Instance.Sounds.Stop(SlotsSoundsManager.Machine_Sequence_Spinning);
			DoPresentations(true);
		}
		
		// presentations
		public function DoPresentations(firstPresentationPerSpin:Boolean):void
		{
			if (_active)
			{
				_valuatorsHandler = Main.Instance.ActiveMachine.GetResultMatrixHandler.ActiveResultMatrix.GetValuatorsHandler;
				
				if (_valuatorsHandler.IsValuable)
				{
					if (firstPresentationPerSpin)
					{
						Main.Instance.Application.Ticker.PushMessage("You Won!", "You Won!", true);
						Main.Instance.Sounds.Play(SlotsSoundsManager.Machine_Sequence_Won);
					}
					DoBomb();
				}
				else
				{
					Main.Instance.Application.Ticker.PushMessage("No Win", "", true);
					Main.Instance.Sounds.Play(SlotsSoundsManager.Machine_Sequence_NoWin);
					
					var noWinTimer:TimerEx = new TimerEx(1667);
					noWinTimer.addEventListener(TimerEvent.TIMER, OnNoWinTimer);
					noWinTimer.start();
				}
			}
		}

		private function OnNoWinTimer(event:TimerEvent):void
		{
			var noWinTimer:TimerEx = TimerEx(event.currentTarget);
			noWinTimer.removeEventListener(TimerEvent.TIMER, OnNoWinTimer);
			if (_active)
			{
				DoFreeSpins();
			}
			else
			{
				noWinTimer.stop();
			}
			
			if (noWinTimer)
			{
				noWinTimer.Dispose();
				noWinTimer = null;
			}
		}
		
		private function DoBomb():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Bomb.IsValuable)
				{
					Main.Instance.Application.Ticker.PushMessage("Boom!", "", true);
					SlotsMachineView(View).GetPresentationBox.ShowBombPresentation(null, OnPostBombPresentation, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareBomb();
				}
				else
				{
					DoMiniSpin();
				}
			}
		}
		private function OnPostBombPresentation():void
		{
			if (_active)
			{
				var chips:Number = _valuatorsHandler.Chips;
				_activeMachine.GetResultMatrixHandler.ActiveResultMatrix.ReCalculatePayout(_activeMachine.SelectedPaylines, _activeMachine.SelectedBetChips);
				DoPresentations(false);
			}
		}
		
		private function DoMiniSpin():void
		{
			if (_active)
			{
				if (_valuatorsHandler.MiniSpin.IsValuable)
				{
					Main.Instance.Application.Ticker.PushMessage("Bonus Spin", "", true);
					SlotsMachineView(View).GetPresentationBox.ShowMiniSpinPresentation(null, OnPostMiniSpinPresentation, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareMiniSpin();
				}
				else
				{
					DoCollectibles();
				}
			}
		}
		private function OnPostMiniSpinPresentation():void
		{
			if (_active)
			{
				var chips:Number = _valuatorsHandler.Chips;
				_activeMachine.GetResultMatrixHandler.ActiveResultMatrix.ReCalculatePayout(_activeMachine.SelectedPaylines, _activeMachine.SelectedBetChips);
				DoPresentations(false);
			}
		}
		
		private function DoCollectibles():void
		{
			if (_active)
			{
				//MachineView(View).GetPresentationBox.ShowAceCollectiblesPresentation(DoColumn, MachineView(View));
				//MachineView(View).GetPresentationBox.ShowGoldCollectiblesPresentation(DoColumn, MachineView(View));
				//MachineView(View).GetPresentationBox.ShowKingCollectiblesPresentation(DoColumn, MachineView(View));
				//Main.Instance.XServices.Social.ShareCollectible();
				DoColumn();
			}
		}
		
		private function DoColumn():void
		{
			if (_active)
			{
				if (Main.Instance.ActiveMachine.Win > 0)
				{
					Main.Instance.Application.Ticker.PushMessage("You Won:" + FormatterHelper.NumberToMoney(Main.Instance.ActiveMachine.Win), "", true);
				}
				else
				{
					Main.Instance.Application.Ticker.PushMessage("You Won!", "", true);
				}
				
				if (_valuatorsHandler.Column.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowColumnPresentation(OnClickToBonusGame, DoSymetric, SlotsMachineView(View));
				}
				else
				{
					DoSymetric();
				}
			}
		}
		
		private function DoSymetric():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Symetric.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowSymetricPresentation(OnClickToBonusGame, DoStrike, SlotsMachineView(View));
				}
				else
				{
					DoStrike();
				}
			}
		}
		
		private function DoStrike():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Strike.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowStrikePresentation(OnClickToBonusGame, DoWins, SlotsMachineView(View), _activeMachine.SelectedPaylines);
				}
				else
				{
					DoBonusGame();
				}
			}
		}
		
		private function DoWins():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Strike.IsMegaWin)
				{
					SlotsMachineView(View).GetPresentationBox.ShowMegaWinPresentation(OnClickToBonusGame, DoFiveInARow, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareMegaWin(_valuatorsHandler.Strike.Chips);
				}
				else if (_valuatorsHandler.Strike.IsExtraBigWin)
				{
					SlotsMachineView(View).GetPresentationBox.ShowExtraBigWinPresentation(OnClickToBonusGame, DoFiveInARow, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareExtraBigWin(_valuatorsHandler.Strike.Chips);
				}
				else if (_valuatorsHandler.Strike.IsBigWin)
				{
					SlotsMachineView(View).GetPresentationBox.ShowBigWinPresentation(OnClickToBonusGame, DoFiveInARow, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareBigWin(_valuatorsHandler.Strike.Chips);
				}
				else if (_valuatorsHandler.Strike.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowNormalWinPresentation(OnClickToBonusGame, DoFiveInARow, SlotsMachineView(View));
				}
				else
				{
					DoFiveInARow();
				}
			}
		}
		
		private function DoFiveInARow():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Strike.IsFiveInARow)
				{
					SlotsMachineView(View).GetPresentationBox.ShowFiveInARowPresentation(OnClickToBonusGame, DoBonusGame, SlotsMachineView(View));
					Main.Instance.XServices.Social.Share5InARow();
				}
				else
				{
					DoFourInARow();
				}
			}
		}
		
		private function DoFourInARow():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Strike.IsFourInARow)
				{
					SlotsMachineView(View).GetPresentationBox.ShowFourInARowPresentation(OnClickToBonusGame, DoBonusGame, SlotsMachineView(View));
					Main.Instance.XServices.Social.Share4InARow();
				}
				else
				{
					DoBonusGame();
				}
			}
		}
		
		private function OnClickToBonusGame():void
		{
			if (_active)
			{
				if (_valuatorsHandler.BonusGame.IsValuable)
				{
					DoBonusGame();
				}
				else
				{
					OnClickToFreeSpins();
				}
			}
		}
		private function DoBonusGame():void
		{
			if (_active)
			{
				if (_valuatorsHandler.BonusGame.IsValuable)
				{
					DoBonusGamePresentation();
				}
				else
				{
					DoMultiplier();
				}
			}
		}
		private function DoBonusGamePresentation():void
		{
			SlotsMachineView(View).GetPresentationBox.ShowBonusGameIsValuablePresentation(null, DoMultiplier, SlotsMachineView(View));
		}
		
		private function DoMultiplier():void
		{
			if (_active)
			{
				if (_valuatorsHandler.Multiplier.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowMultiplierPresentation(OnClickToFreeSpins, DoFreeSpins, SlotsMachineView(View));
					Main.Instance.XServices.Social.ShareMultiplier(_valuatorsHandler.Multiplier.Chips);
				}
				else
				{
					DoFreeSpins();
				}
			}
		}
		
		private function OnClickToFreeSpins():void
		{
			DoFreeSpins();
		}
		private function DoFreeSpins():void
		{
			if (_active)
			{
				if (_valuatorsHandler.FreeSpins.IsValuable)
				{
					SlotsMachineView(View).GetPresentationBox.ShowFreeSpinsIsValuablePresentation(null, PostDoFreeSpins, SlotsMachineView(View));
				}
				else
				{
					PostDoFreeSpins();
				}
			}
		}
		private function PostDoFreeSpins():void
		{
			DoWinToBalance();
		}
		
		private function DoWinToBalance():void
		{
			if (_active)
			{
				if (Main.Instance.ActiveMachine.Win > 0)
				{
					Main.Instance.Application.Ticker.PushMessage("You Won:" + FormatterHelper.NumberToMoney(_valuatorsHandler.Chips), "", true);
				}
				
				if (_valuatorsHandler.Chips > 0)
				{
					SlotsMachineView(View).GetPresentationBox.ShowWinToBalanceIsValuablePresentation(null, DoFreeSpinsPendingOrWon, SlotsMachineView(View));
				}
				else
				{
					DoFreeSpinsPendingOrWon();
				}
			}
		}
		
		private function DoFreeSpinsPendingOrWon():void
		{
			if (_active)
			{
				if (_activeMachine.LobbyMachine.MachineSession.FreeSpinsWonCount > 0)
				{
					_activeMachine.LobbyMachine.MachineSession.FreeSpinsCollectChips(_valuatorsHandler.Chips);
					if (_activeMachine.LobbyMachine.MachineSession.FreeSpinsPendingCount == 0)
					{
						SlotsNotificationsHandler.Instance.ShowFreeSpinsEndPopup(OnShowFreeSpinsEndPopupClose);
					}
					else if (Main.Instance.Session.Rare.PendingLevelUpPopups.length > 0 || Main.Instance.Session.Rare.PendingNewMachinePopups.length > 0)
					{
						DoShowPendingPopups();
					}
					else
					{
						DoSpin(false);
					}
				}
				else
				{
					DoPostPresentations();
				}
			}
		}
		private function OnShowFreeSpinsEndPopupClose():void
		{
			_activeMachine.LobbyMachine.MachineSession.FreeSpinsEndPopupClosed();
			DoPostPresentations();
		}
		
		public function DoPostPresentations():void
		{
			DoIdle();
		}		
	}
}