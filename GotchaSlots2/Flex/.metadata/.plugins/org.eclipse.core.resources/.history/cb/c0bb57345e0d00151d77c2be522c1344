package com.gotchaslots.common.mobile.data.session.machines
{
	import com.gotchaslots.common.mobile.data.session.base.BaseIOData;
	import com.gotchaslots.common.mobile.data.session.base.ISession;
	import com.gotchaslots.slots.mobile.data.session.machines.SlotsMachineSessionData;
	
	public class MachinesSessionCollection extends BaseIOData implements ISession
	{
		// consts
		private const KEY:String = "14a81a2005df47098771b0b98bb07bd9";
		
		// members
		private var _machinesSession:Vector.<SlotsMachineSessionData>;	// serialize
		
		// properties
		protected override function get Key():String
		{
			return KEY;
		}
		
		public function get MachinesSession():Vector.<SlotsMachineSessionData>
		{
			return _machinesSession;
		}
		public function set MachinesSession(value:Vector.<SlotsMachineSessionData>):void
		{
			if (_machinesSession != value)
			{
				_machinesSession = value;
				Save();
			}
		}
		
		// class
		public function MachinesSessionCollection()
		{
			super();
			
			_initialized = true;
		}
		protected override function Init():void
		{
			_machinesSession = new Vector.<SlotsMachineSessionData>();
		}
		public override function Dispose():void
		{
			super.Dispose();
			
			while (_machinesSession && _machinesSession.length > 0)
			{
				var machineSession:SlotsMachineSessionData = _machinesSession.pop();
				machineSession.Dispose();
				machineSession = null;
			}
			_machinesSession = null;
		}
		
		// serialize
		public override function Deserialize(object:Object):void
		{
			MachinesSession = new Vector.<SlotsMachineSessionData>();
			for (var i:int = 0; i < object.length; i++)
			{
				var newMachineSession:SlotsMachineSessionData = CreateMachineSession(object.ID);
				newMachineSession.Deserialize(object[i]);
				MachinesSession.push(newMachineSession);
			}
		}
		public override function Serialize():Object
		{
			var result:Array = new Array();
			for (var i:int = 0; i < MachinesSession.length; i++)
			{
				var machineSession:SlotsMachineSessionData = MachinesSession[i];
				result.push(machineSession.Serialize());
			}
			return result;
		}
		
		// methods
		private function CreateMachineSession(id:int):SlotsMachineSessionData
		{
			return new SlotsMachineSessionData(id, this);
		}
		public function AddNewMachineSession(id:int):void
		{
			MachinesSession.push(CreateMachineSession(id));
			Save();
		}
		
		public function MachineSessionByID(id:int):SlotsMachineSessionData
		{
			var result:SlotsMachineSessionData;
			for (var i:int = 0; i < _machinesSession.length; i++)
			{
				var machineSession:SlotsMachineSessionData = SlotsMachineSessionData(_machinesSession[i]);
				if (machineSession.ID == id)
				{
					result = machineSession;
					break;
				}
			}
			return result;
		}
		
		// fix
		public function Fix():void
		{
			for (var i:int = 0; i < _machinesSession.length; i++)
			{
				var machineSession:SlotsMachineSessionData = SlotsMachineSessionData(_machinesSession[i]);
				machineSession.Fix();
			}
			Save();
		}
	}
}