package com.gotchaslots.slots.mobile.ui.common.components.freeActionScript.fountain{	import com.gotchaslots.slots.mobile.data.Main;	import com.gotchaslots.slots.mobile.ui.common.components.SpriteEx;	import com.gotchaslots.slots.mobile.utils.debug.FrameRateHandler;	import com.greensock.TweenMax;		import flash.events.Event;	import flash.geom.Point;
		public class Fountains extends SpriteEx	{		// members		private var _bitmapClass:Class;		private var _fountains:Array;				private var _maxFountains:int;		private var _active:Boolean;				private var _minX:int = 1;		private var _minY:int = 1;		private var _width:int = 800;		private var _height:int = 494;		private var _startPoint:Point = new Point(400, 328);		private var _controlPoint:Point = new Point(400, 200);				// class		public function Fountains(initialFountains:int, maxFountains:int, bitmapClass:Class)		{			_maxFountains = maxFountains;						_bitmapClass = bitmapClass;			_fountains = new Array;			var i:int = 0;			var fountain:MovingFountain;			for (i; i < initialFountains; i++)			{				fountain = CreateRandomFountain();				fountain.visible = false;				_fountains.push(fountain);				addChild(fountain);			}		}		public override function Dispose():void		{			Stop();						var fountain:MovingFountain;			for each (fountain in _fountains)			{				DestroyFountain(fountain);			}						TweenMax.killDelayedCallsTo(ShowFountain);						super.Dispose();		}				// methods		public function Play():void		{			var delay:Number = 0;						var fountain:MovingFountain;			for each (fountain in _fountains)			{				try				{					TweenMax.delayedCall(delay, ShowFountain, [fountain]);					delay += .05;				}				catch (error:Error)				{				}			}			addEventListener(Event.ENTER_FRAME, OnEnterFrame);			Start();		}		public function Start():void		{			_active = true;		}		public function Stop():void		{			_active = false;		}				private function ShowFountain(fountain:MovingFountain):void		{			try			{				fountain.visible = true;				fountain.init(_controlPoint, GetRandomPoint(fountain.radius, fountain.radius));			}			catch (error:Error)			{			}		}				private function CreateRandomFountain():MovingFountain		{			var fountain:MovingFountain = new MovingFountain(_startPoint, _bitmapClass);			return fountain;		}				private function DestroyFountain(fountain:MovingFountain):void		{			if (contains(fountain))			{				removeChild(fountain);				fountain.removeEventListener(Event.COMPLETE, OnFountainComplete);				fountain.destroy();			}		}				private function GetRandomPoint(fountainWidth:int, fountainHeight:int):Point		{			return new Point(_minX + Math.random() * (_width - fountainWidth), _minY + Math.random() * (_height - fountainHeight));		}				// events		private function OnEnterFrame(e:Event):void		{			var localPoint:Point = localToGlobal(new Point(0, 0));						var fountain:MovingFountain;			var fountainPoint:Point;			var i:int;			var l:int = _fountains.length;			for (i; i < l; i++)			{				fountain = _fountains[i];				if (fountain.popping || !fountain.started) continue;								fountainPoint = fountain.getGlobalPosition();								if (localPoint.x + _minX > fountainPoint.x - fountain.radius ||					localPoint.x + _minX + _width < fountainPoint.x + fountain.radius ||					localPoint.y + _minY > fountainPoint.y - fountain.radius ||					localPoint.y + _minY + _height < fountainPoint.y + fountain.radius)				{					fountain.addEventListener(Event.COMPLETE, OnFountainComplete);					fountain.pop();				}			}		}		private function OnFountainComplete(event:Event):void		{			var fountain:MovingFountain = MovingFountain(event.target);			var i:int = 0;			var l:int = _fountains.length;			var deleteIndex:int = -1;			for (i = 0; i < l; i++)			{				if (_fountains[i] == fountain)				{					deleteIndex = i;					break;				}			}			if ( -1 != deleteIndex)			{				_fountains.splice(deleteIndex, 1);			}			DestroyFountain(fountain);						// controls the fountain so it will not overload the frameRate over 50			if (Main.Instance.Device.FrameRate.ActualFrameRate > FrameRateHandler.MAX_RATE_FOR_ANIMATION &&				numChildren < _maxFountains &&				_active)			{				for (i = 0; i < 3; i++)				{					try					{						fountain = CreateRandomFountain();						_fountains.push(fountain);						addChild(fountain);						fountain.init(_controlPoint, GetRandomPoint(fountain.radius, fountain.radius));					}					catch (error:Error)					{					}				}			}		}	}}