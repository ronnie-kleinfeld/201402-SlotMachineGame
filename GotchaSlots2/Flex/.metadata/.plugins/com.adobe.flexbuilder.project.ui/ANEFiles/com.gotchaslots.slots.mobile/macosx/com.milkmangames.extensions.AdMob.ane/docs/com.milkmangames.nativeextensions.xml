<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.milkmangames.nativeextensions"><apiName>com.milkmangames.nativeextensions</apiName><apiDetail/><apiClassifier id="com.milkmangames.nativeextensions:AdMobAdType"><apiName>AdMobAdType</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.milkmangames.nativeextensions:AdMobAdType:getPixelSize"><apiName>getPixelSize</apiName><shortdesc>
		 Return the pixel dimension of a given fixed ad type for the device currently running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>a Rectangle object's whose width and height properties reflect the true pixel size of the ad relative to the device dimensions.
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>adType</apiItemName><apiType value="String"/><apiDesc>The ad type to get the pixel size for (AdMobAdType.BANNNER,AdMobAdType.IAB_MRECT,AdMobAdType.IAB_BANNER, or AdMobAdType.IAB_LEADERBOARD.)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the pixel dimension of a given fixed ad type for the device currently running. (AdMob sizes are dependent on the DPI of the phone or tablet;
		 for instance, BANNER may be larger (in pixels) on a phone with a 3" screen than a phone with a 5" screen.
		 
		 Not available for dynamically sized ads ("smart" banners.)
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:BANNER"><apiName>BANNER</apiName><shortdesc> Standard Banner (Phone) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.BANNER) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>BANNER</apiData><apiType value="String"/></apiValueDef><apiDesc> Standard Banner (Phone) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.BANNER) to determine the pixel size this ad will appear.  </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_BANNER"><apiName>IAB_BANNER</apiName><shortdesc> IAB Full-Size Banner (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_BANNER) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_BANNER</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Full-Size Banner (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_BANNER) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_LEADERBOARD"><apiName>IAB_LEADERBOARD</apiName><shortdesc> IAB Leaderboard (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_LEADERBOARD) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_LEADERBOARD</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Leaderboard (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_LEADERBOARD) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_MRECT"><apiName>IAB_MRECT</apiName><shortdesc> IAB Medium Rectangle (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_MRECT) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_MRECT</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Medium Rectangle (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_MRECT) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:SMART_BANNER"><apiName>SMART_BANNER</apiName><shortdesc> Smart Banner Size.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>SMART_BANNER</apiData><apiType value="String"/></apiValueDef><apiDesc> Smart Banner Size.  AdMob will automatically attempt to insert the best fitting ad for the orientation at the time the ad was displayed. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions:AdMob"><apiName>AdMob</apiName><shortdesc> AdMob </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> AdMob </apiDesc></apiClassifierDetail><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.android.events.AdMobEvent.SYSTEM_AD_ID_LOADED_SYSTEM_AD_ID_LOADED"><apiName>SYSTEM_AD_ID_LOADED</apiName><shortdesc> Dispatched in response to AdMob.loadSystemAdvertisingId()
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.android.events.AdMobEvent.SYSTEM_AD_ID_LOADED</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.android.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched in response to AdMob.loadSystemAdvertisingId()
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.LEAVE_APPLICATION_LEAVE_APPLICATION"><apiName>LEAVE_APPLICATION</apiName><shortdesc> Dispatched when a user action on an ad causes the focus to change elsewhere
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.LEAVE_APPLICATION</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a user action on an ad causes the focus to change elsewhere
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_DISMISSED_SCREEN_DISMISSED"><apiName>SCREEN_DISMISSED</apiName><shortdesc> Dispatched when a fullscreen interactive ad view is dismissed by the ad
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_DISMISSED</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a fullscreen interactive ad view is dismissed by the ad
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_PRESENTED_SCREEN_PRESENTED"><apiName>SCREEN_PRESENTED</apiName><shortdesc> Dispatched when a fullscreen interactive ad view is presented by an ad
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_PRESENTED</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a fullscreen interactive ad view is presented by an ad
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobErrorEvent.FAILED_TO_RECEIVE_AD_FAILED_TO_RECEIVE_AD"><apiName>FAILED_TO_RECEIVE_AD</apiName><shortdesc> Dispatched when ad has failed to load after a call to showAd() 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobErrorEvent.FAILED_TO_RECEIVE_AD</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when ad has failed to load after a call to showAd() 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.RECEIVED_AD_RECEIVED_AD"><apiName>RECEIVED_AD</apiName><shortdesc> Dispatched when ad has successfully loaded following a call to AdMob.showAd()
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.RECEIVED_AD</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when ad has successfully loaded following a call to AdMob.showAd()
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="com.milkmangames.nativeextensions:AdMob:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type (AdMobEvent or AdMobErrorEvent)
	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc> The listener function that processes the event. 
	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
	 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc> The priority level of the event listener. Priorities are designated by a 32-bit integer.
	 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.events.xml#AdMobEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobEvent</linktext></link><link href="com.milkmangames.nativeextensions.events.xml#AdMobErrorEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:destroyAd"><apiName>destroyAd</apiName><shortdesc>
	 Destroys the current banner ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Destroys the current banner ad.  Throws an error if no ad is currently active.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:enableTestDeviceIDs"><apiName>enableTestDeviceIDs</apiName><shortdesc>
	 Sets a list of device IDs, for which test ads will always display.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>testDevices</apiItemName><apiType value="Vector$String"/><apiDesc>(optional) Vector of device test IDs, if running test ads on device.  (For convenience, you can pass AdMob.getCurrentTestDeviceIDs() to this parameter- but remember to remove it before publishing your app.)  Alternatively, to get your devices test id on Android, run an application and view logcat (command 'android-sdk\platform-tools\adb logcat').  Your device test ID will be printed there.  For iOS, you can just enter 'TEST'.  See Google's AdMob documentation for more details.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sets a list of device IDs, for which test ads will always display.  You can get the current device's ID by calling getCurrentTestDeviceIDs().  
	 
	 Remember to remove the enableTestDeviceIDs() call before publishing your application, so as not to display test ads to end users.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:getCurrentTestDeviceIDs"><apiName>getCurrentTestDeviceIDs</apiName><shortdesc>
	 Get an array containing the Test Device ID for your current device; you can pass this to the enableTestDeviceIDs() function during testing.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>array containing current device's test ID
	 </apiDesc><apiType value="Vector$String"/></apiReturn><apiParam><apiItemName>additionalIDs</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>array of additional Strings to append to the test IDs list.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Get an array containing the Test Device ID for your current device; you can pass this to the enableTestDeviceIDs() function during testing.
	 
	 Remember to remove the enableTestDeviceIDs() call before publishing your application, so as not to display test ads to end users.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:init"><apiName>init</apiName><shortdesc>
	 Initialize the AdMob interface.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>publisherId</apiItemName><apiType value="String"/><apiDesc>your publisherId or Ad Unit ID to use for banner ads (check your AdMob account control panel for your App.)
	 </apiDesc></apiParam><apiParam><apiItemName>secondPublisherId</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>if publishing for both iOS and Android, and supported by this version of the extension, set the publisherId param to the Android ID and the second parameter to the iOS ID.  If publishing for only one platform, fill only fiirst parameter with the appropriate ID.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Initialize the AdMob interface.  Call this once, before using any other methods.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:isInterstitialReady"><apiName>isInterstitialReady</apiName><shortdesc>
	 Checks whether an interstitial ad being preloaded with a prior call to loadInterstitial() is loaded and ready for display.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>true if an interstitial is ready for display via showPendingInterstitial().
	 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
	 Checks whether an interstitial ad being preloaded with a prior call to loadInterstitial() is loaded and ready for display.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:loadInterstitial"><apiName>loadInterstitial</apiName><shortdesc>
	 Loads an interstitial ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if the previous interstitial has not yet completed
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>adUnitID</apiItemName><apiType value="String"/><apiDesc>the ad unit ID of the interstitial to display
	 </apiDesc></apiParam><apiParam><apiItemName>autoShow</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>(optional) if set to false, the ad will preload but not be  displayed until showPendingInterstitial() is called.
	 </apiDesc></apiParam><apiParam><apiItemName>secondAdUnitID</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>(optional)	if targeting both iOS and Android, set this to the iOS ID, and the first parameter to the Android ID.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Loads an interstitial ad.  By default, the ad will be displayed automatically when the ad has been loaded.  To preload the ad for later use, set the autoShow parameter to false, and call showPendingInterstitial() after receiving the AdMobEvent.RECEIVED_AD callback (it's isInterstitial property will be set to 'true').
	 
	 Note that you can only load (or preload) one interstitial at a time.  Before loading the next interstitial, you must wait for the original interstitial to be removed, either due to a FAILED_TO_RECIEVE_AD or SCREEN_DISMISSED event.
	 
	 If you are targeting both Android and iOS from the same code base, and you wish to use different ad unit IDs for the two platforms, set the Android ad unit ID as the first parameter, and the iOS ad unit ID as the third parameter.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:loadSystemAdvertisingId"><apiName>loadSystemAdvertisingId</apiName><shortdesc>
	 Load the System Advertising ID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Load the System Advertising ID.  On Android systems, this is the Google Advertising Identifier.  On iOS Systems, this is the Identifier for Advertising. When complete, <codeph>AdMobEvent.SYSTEM_AD_ID_LOADED</codeph> will be dispatched; If the user has opted out of this type of tracking, its <codeph>systemAdvertisingId</codeph> property will be the string "limited".  If the ID is not available on this OS, it will be null.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.events.xml#AdMobEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:refreshAd"><apiName>refreshAd</apiName><shortdesc>
	 Refresh the banner ad currently on display.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Refresh the banner ad currently on display. 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type (AdMobEvent or AdMobErrorEvent)
	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event. 
	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.events.xml#AdMobEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobEvent</linktext></link><link href="com.milkmangames.nativeextensions.events.xml#AdMobErrorEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:setBannerAdUnitID"><apiName>setBannerAdUnitID</apiName><shortdesc>
	 Sets the Ad Unit ID that will be used for banner ads.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>adUnitID</apiItemName><apiType value="String"/><apiDesc>ad unit ID to use when displaying banner ads
	 </apiDesc></apiParam><apiParam><apiItemName>secondAdUnitID</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>(optional)	if targeting both iOS and Android, set this to the iOS ID, and the first parameter to the Android ID.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sets the Ad Unit ID that will be used for banner ads.
	 
	 If you are targeting both Android and iOS from the same code base, and you wish to use different ad unit IDs for the two platforms, set the Android ad unit ID as the first parameter, and the iOS ad unit ID as the second parameter.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:setChildDirected"><apiName>setChildDirected</apiName><shortdesc>
	 To comply with COPPA, call setChildDirected(true) if your application is targeting children.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isChildDirected</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>whether the app may be serving ads to children
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 To comply with COPPA, call setChildDirected(true) if your application is targeting children.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:setVisibility"><apiName>setVisibility</apiName><shortdesc>
	 Sets the visibility of the current banner ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Thrown if AdMob.init has not yet been called first
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>Thrown if there is no activeAd to show or hide. 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc>true or false - whether the ad is visible or not.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sets the visibility of the current banner ad.  It may be useful to hide and show an ad instead of destroying and reloading.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:showAd"><apiName>showAd</apiName><shortdesc>
	 Displays a new Banner Ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Thrown if AdMob.init has not yet been called first
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if adFormat is not one of the valid types AdMobAdType.BANNER,AdMobAdType.IAB_BANNER,AdMobAdType.IAB_LEADERBOARD, AdMobAdType.SMART_BANNER or AdMobAdType.IAB_MRECT
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if horizontalAlign is not one of the valid types AdMobAlignment.LEFT,AdMobAlignment.RIGHT, or AdMobAlignment.CENTER
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>if verticalAlign is not one of the valid types AdMobAlignment.TOP,AdMobAlignment.BOTTOM,AdMobAlignment.CENTER
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>ad format, of the type AdMobAdType.BANNER,AdMobAdType.IAB_BANNER,AdMobAdType.IAB_LEADERBOARD, AdMobAdType.SMART_BANNER or AdMobAdType.IAB_MRECT.  See AdMob documentation for more information.
	 </apiDesc></apiParam><apiParam><apiItemName>horizontalAlign</apiItemName><apiType value="String"/><apiDesc>horizontal alignment of the ad of the type AdMobAlignment.LEFT,AdMobAlignment.RIGHT, or AdMobAlignment.CENTER
	 </apiDesc></apiParam><apiParam><apiItemName>verticalAlign</apiItemName><apiType value="String"/><apiDesc>vertical alignment of the ad of the type AdMobAlignment.TOP,AdMobAlignment.BOTTOM,AdMobAlignment.CENTER
	 </apiDesc></apiParam><apiParam><apiItemName>offsetX</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>(optional) set an exact X pixel offset (for absolute positioning.)  Note that this is relative to the actual screen height, not any fullscreen scaling; if your screen is scaled, you'll need to calculate the correct relative coordinates.  for basic absolute positioning (traditional x, y from top left), use AdMobAlignment.TOP and AdMobAlignment.LEFT for horizontalAlign and verticalAlign respectively.
	 </apiDesc></apiParam><apiParam><apiItemName>offsetY</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>(optional) set an exact Y pixel offset (for absolute positioning.)  Note that this is relative to the actual screen height, not any fullscreen scaling; if your screen is scaled, you'll need to calculate the correct relative coordinates.  for basic absolute positioning (traditional x, y from top left), use AdMobAlignment.TOP and AdMobAlignment.LEFT for horizontalAlign and verticalAlign respectively.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Displays a new Banner Ad.  You can set the ad unit id for banner ads by calling setBannerAdUnitID().
	 
	 </apiDesc></apiOperationDetail><related-links><link href="http://helpcenter.admob.com/content/create-ad"><linktext>Google AdMob Documentation</linktext></link><link href="com.milkmangames.nativeextensions.xml#AdMobAdType"><linktext>AdMobAdType</linktext></link><link href="com.milkmangames.nativeextensions.xml#AdMobAlignment"><linktext>AdMobAlignment</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:showPendingInterstitial"><apiName>showPendingInterstitial</apiName><shortdesc>
	 Displays an interstitial ad that was previously preloaded with loadInterstitial().</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Displays an interstitial ad that was previously preloaded with loadInterstitial().  The ad will only be displayed if preloading is completed, and the AdMobEvent.RECEIVED_AD event has been dispatched with its isInterstitial property true.  You can directly check if an interstitial is ready to display with the AdMob.isInterstitialReady() function.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:trackIOSConversion"><apiName>trackIOSConversion</apiName><shortdesc>
	 Tracks an install conversion for iOS.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>conversionID</apiItemName><apiType value="String"/><apiDesc>conversion ID
	 </apiDesc></apiParam><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>conversion label
	 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>conversion label
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Tracks an install conversion for iOS.  Does nothing on Android, as this happens automatically there.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions:AdMob:VERSION"><apiName>VERSION</apiName><shortdesc>
	 Current API Version
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4.8.0</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 Current API Version
	 </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMob:isSupported:get"><apiName>isSupported</apiName><shortdesc>
	 Returns true if the platform is a mobile phone supporting AdMob.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 Returns true if the platform is a mobile phone supporting AdMob. (Android, iOS, or both, depending on the extension version.)
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions:AdMobAlignment"><apiName>AdMobAlignment</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:BOTTOM"><apiName>BOTTOM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>BOTTOM</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:CENTER"><apiName>CENTER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>CENTER</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:LEFT"><apiName>LEFT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>LEFT</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:RIGHT"><apiName>RIGHT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>RIGHT</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:TOP"><apiName>TOP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>TOP</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>